name: 'Terraform CI/CD'

on:
  push:
    branches: [ main ]
    paths:
      - 'infrastructure/terraform/**'
      - '.github/workflows/terraform.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'infrastructure/terraform/**'
      - '.github/workflows/terraform.yml'

permissions:
  id-token: write
  contents: read

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::784902437693:role/github-actions
        aws-region: us-east-1

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "1.7.0"

    - name: Create Lambda Directories
      run: |
        pwd
        mkdir -p backend/src/analyze_story
        mkdir -p backend/src/estimate_story
        mkdir -p backend/src/get_status
        mkdir -p backend/dist
        ls -la backend/src/

    - name: Create Lambda Functions
      run: |
        echo 'def lambda_handler(event, context):
            return {"statusCode": 200, "body": "Story analysis placeholder"}' > backend/src/analyze_story/lambda_function.py
        echo 'def lambda_handler(event, context):
            return {"statusCode": 200, "body": "Story estimation placeholder"}' > backend/src/estimate_story/lambda_function.py
        echo 'def lambda_handler(event, context):
            return {"statusCode": 200, "body": "Status check placeholder"}' > backend/src/get_status/lambda_function.py
        ls -la backend/src/*/lambda_function.py

    - name: Create Lambda Packages
      run: |
        (cd backend/src/analyze_story && zip -r ../../dist/analyze_story.zip lambda_function.py)
        (cd backend/src/estimate_story && zip -r ../../dist/estimate_story.zip lambda_function.py)
        (cd backend/src/get_status && zip -r ../../dist/get_status.zip lambda_function.py)

    - name: Terraform Format
      working-directory: ./infrastructure/terraform
      run: terraform fmt -check -recursive

    - name: Terraform Init
      working-directory: ./infrastructure/terraform/environments/dev
      run: terraform init

    - name: Terraform Validate
      working-directory: ./infrastructure/terraform/environments/dev
      run: terraform validate

    - name: Terraform Plan
      working-directory: ./infrastructure/terraform/environments/dev
      run: terraform plan -no-color
      if: github.event_name == 'pull_request'

    - name: Terraform Apply
      working-directory: ./infrastructure/terraform/environments/dev
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: terraform apply -auto-approve 