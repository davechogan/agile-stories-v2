commit da133223e1fd2f6f241a32a078712d4e3651cc49
Author: David Hogan <davechogan@gmail.com>
Date:   Mon Jan 13 00:46:39 2025 -0500

    feat: add all main views and navigation
    
    - Add StoryInput view with title field
    - Add AgileResults view from TestFormatView
    - Add TechReview view
    - Add Estimates view from TestEstimateView
    - Set up navigation between all views
    - Configure routes for all pages
    - Add mock data for testing
    - Clean up test routes

diff --git a/frontend/src/views/AboutView.vue b/frontend/src/views/AboutView.vue
new file mode 100644
index 0000000..756ad2a
--- /dev/null
+++ b/frontend/src/views/AboutView.vue
@@ -0,0 +1,15 @@
+<template>
+  <div class="about">
+    <h1>This is an about page</h1>
+  </div>
+</template>
+
+<style>
+@media (min-width: 1024px) {
+  .about {
+    min-height: 100vh;
+    display: flex;
+    align-items: center;
+  }
+}
+</style>
diff --git a/frontend/src/views/AgileResults.vue b/frontend/src/views/AgileResults.vue
new file mode 100644
index 0000000..4159ec0
--- /dev/null
+++ b/frontend/src/views/AgileResults.vue
@@ -0,0 +1,503 @@
+<template>
+  <div class="test">
+    <div class="two-column-layout">
+      <!-- Left Column: Primary Content -->
+      <div class="primary-content-wrapper">
+        <div class="primary-content">
+          <div class="story-section">
+            <h3>Improved Story</h3>
+            <div class="editable-content">
+              <template v-if="!editingStory">
+                <pre>{{ mockAnalysisResult.improved_story.text }}</pre>
+                <v-btn 
+                  size="small" 
+                  color="primary" 
+                  class="edit-btn"
+                  icon="mdi-pencil"
+                  @click="startEditingStory"
+                ></v-btn>
+              </template>
+              <template v-else>
+                <v-textarea
+                  v-model="editedStory"
+                  auto-grow
+                  variant="outlined"
+                  class="edit-textarea"
+                ></v-textarea>
+                <div class="edit-actions">
+                  <v-btn 
+                    size="small" 
+                    color="success" 
+                    @click="saveStory"
+                    class="mr-2"
+                  >Save</v-btn>
+                  <v-btn 
+                    size="small" 
+                    color="error" 
+                    @click="cancelEditStory"
+                  >Cancel</v-btn>
+                </div>
+              </template>
+            </div>
+            
+            <h3>Enhanced Acceptance Criteria</h3>
+            <div class="editable-content">
+              <template v-if="!editingAC">
+                <ul>
+                  <li v-for="(criterion, index) in mockAnalysisResult.improved_story.acceptance_criteria" 
+                      :key="index">
+                    {{ criterion }}
+                  </li>
+                </ul>
+                <v-btn 
+                  size="small" 
+                  color="primary" 
+                  class="edit-btn"
+                  icon="mdi-pencil"
+                  @click="startEditingAC"
+                ></v-btn>
+              </template>
+              <template v-else>
+                <v-textarea
+                  v-model="editedAC"
+                  auto-grow
+                  variant="outlined"
+                  placeholder="One acceptance criterion per line"
+                  class="edit-textarea"
+                ></v-textarea>
+                <div class="edit-actions">
+                  <v-btn 
+                    size="small" 
+                    color="success" 
+                    @click="saveAC"
+                    class="mr-2"
+                  >Save</v-btn>
+                  <v-btn 
+                    size="small" 
+                    color="error" 
+                    @click="cancelEditAC"
+                  >Cancel</v-btn>
+                </div>
+              </template>
+            </div>
+          </div>
+        </div>
+        
+        <!-- Sticky footer inside primary-content-wrapper -->
+        <div class="sticky-footer">
+          <div class="footer-content">
+            <v-btn 
+              color="primary" 
+              @click="router.push('/agile')"
+            >
+              Continue to Agile Review
+            </v-btn>
+            <div class="footer-hint" v-if="editingStory || editingAC">
+              Save your changes to enable sending for review
+            </div>
+          </div>
+        </div>
+      </div>
+
+      <!-- Right Column: Analysis Panel -->
+      <div class="analysis-panel">
+        <div class="analysis">
+          <h3>Analysis</h3>
+          <div class="invest-grid">
+            <div v-for="(item, index) in investAnalysis" :key="index" 
+                 class="invest-item"
+                 :class="{ 'warning': isNegative(item.content) }">
+              <div class="invest-header">
+                <span class="invest-letter">{{ item.letter }}</span>
+                <span class="invest-title">{{ item.title }}</span>
+              </div>
+              <div class="invest-content">{{ item.content }}</div>
+            </div>
+          </div>
+        </div>
+
+        <div class="suggestions mt-6">
+          <h3>Suggestions</h3>
+          <div class="suggestions-list">
+            <div v-for="(suggestion, key) in mockAnalysisResult.suggestions" 
+                 :key="key"
+                 class="suggestion-item">
+              <div class="suggestion-header">{{ key }}</div>
+              <div class="suggestion-content">{{ suggestion }}</div>
+            </div>
+          </div>
+        </div>
+      </div>
+    </div>
+  </div>
+</template>
+
+<script setup lang="ts">
+import { ref } from 'vue'
+import { mockAnalysisResult } from '@/mocks/mockAnalysisData'
+
+// Story editing
+const editingStory = ref(false)
+const editedStory = ref('')
+
+const startEditingStory = () => {
+  editedStory.value = mockAnalysisResult.improved_story.text
+  editingStory.value = true
+}
+
+const saveStory = () => {
+  mockAnalysisResult.improved_story.text = editedStory.value
+  editingStory.value = false
+}
+
+const cancelEditStory = () => {
+  editingStory.value = false
+}
+
+// Acceptance Criteria editing
+const editingAC = ref(false)
+const editedAC = ref('')
+
+const startEditingAC = () => {
+  editedAC.value = mockAnalysisResult.improved_story.acceptance_criteria.join('\n')
+  editingAC.value = true
+}
+
+const saveAC = () => {
+  mockAnalysisResult.improved_story.acceptance_criteria = editedAC.value
+    .split('\n')
+    .filter(line => line.trim()) // Remove empty lines
+  editingAC.value = false
+}
+
+const cancelEditAC = () => {
+  editingAC.value = false
+}
+
+// Parse INVEST analysis into structured data
+const investAnalysis = [
+  {
+    letter: 'I',
+    title: 'Independent',
+    content: 'The user story is independent, as it does not seem to depend on any other user story for its implementation.'
+  },
+  {
+    letter: 'N',
+    title: 'Negotiable',
+    content: 'The story is not very negotiable as it is not clear on what exactly the notification bell should do, or what exactly broadcasting a message entails.'
+  },
+  {
+    letter: 'V',
+    title: 'Valuable',
+    content: 'The value to the user is not clearly stated. Why should the user care about this new notification bell?'
+  },
+  {
+    letter: 'E',
+    title: 'Estimable',
+    content: 'The story is too vague to be reliably estimated. We don\'t know what "broadcasting a message" involves.'
+  },
+  {
+    letter: 'S',
+    title: 'Small',
+    content: 'The story is not small, as it seems to involve several different features or functionalities.'
+  },
+  {
+    letter: 'T',
+    title: 'Testable',
+    content: 'The acceptance criteria are too vague to be testable. What does it mean for everyone to "get it" and "read it"?'
+  }
+]
+
+// Add this function to detect negative feedback
+const isNegative = (content: string): boolean => {
+  const negativeTerms = ['not', 'too vague', 'unclear', 'missing'];
+  return negativeTerms.some(term => content.toLowerCase().includes(term));
+}
+</script>
+
+<style>
+.two-column-layout {
+  display: grid;
+  grid-template-columns: 1fr 1fr;
+  gap: 2rem;
+  padding: 2rem;
+  max-width: 1800px;
+  margin: 0 auto;
+  min-height: 100vh;
+  position: relative;
+}
+
+.primary-content-wrapper {
+  position: relative;
+  height: 100%;
+  display: flex;
+  flex-direction: column;
+}
+
+.primary-content {
+  position: sticky;
+  top: 2rem;
+  background: rgba(255, 255, 255, 0.05);
+  border-radius: 12px;
+  padding: 2rem;
+  max-height: calc(100vh - 8rem);
+  overflow-y: auto;
+  flex-grow: 1;
+}
+
+.analysis-panel {
+  background: rgba(255, 255, 255, 0.05);
+  border-radius: 12px;
+  padding: 2rem;
+}
+
+.editable-content {
+  position: relative;
+  background: rgba(0, 0, 0, 0.2);
+  border-radius: 8px;
+  padding: 1.5rem;
+  margin: 1rem 0;
+  transition: all 0.3s ease;
+}
+
+.edit-btn {
+  position: absolute;
+  top: 0.5rem;
+  right: 0.5rem;
+  opacity: 0;
+  transition: opacity 0.2s ease;
+}
+
+.editable-content:hover .edit-btn {
+  opacity: 1;
+}
+
+.story-section h3 {
+  color: #64B5F6;
+  margin-top: 2rem;
+}
+
+.story-section h3:first-child {
+  margin-top: 0;
+}
+
+.editable-content pre {
+  white-space: pre-wrap;
+  word-wrap: break-word;
+  color: rgba(255, 255, 255, 0.87);
+  font-family: inherit;
+  margin: 0;
+  line-height: 1.6;
+}
+
+.editable-content ul {
+  list-style-type: none;
+  padding-left: 0;
+  margin: 0;
+}
+
+.editable-content li {
+  color: rgba(255, 255, 255, 0.87);
+  margin-bottom: 0.5rem;
+  padding-left: 1.5rem;
+  position: relative;
+}
+
+.editable-content li:before {
+  content: "â€¢";
+  color: #64B5F6;
+  position: absolute;
+  left: 0;
+}
+
+/* Keep existing invest-grid styles */
+.invest-grid {
+  display: grid;
+  grid-template-columns: 1fr;
+  gap: 1rem;
+  margin-top: 1rem;
+}
+
+/* Responsive Design */
+@media (max-width: 1024px) {
+  .two-column-layout {
+    grid-template-columns: 1fr;
+  }
+  
+  .primary-content {
+    position: relative;
+    top: 0;
+    max-height: none;
+  }
+  
+  .analysis-panel {
+    margin-top: 2rem;
+  }
+}
+
+/* Updated Analysis Panel Styles */
+.analysis-panel {
+  background: rgba(255, 255, 255, 0.05);
+  border-radius: 12px;
+  padding: 2rem;
+}
+
+.analysis-panel h3 {
+  color: #64B5F6;
+  font-size: 1.2rem;
+  margin-bottom: 1.5rem;
+  font-weight: 500;
+}
+
+/* INVEST Grid Refinements */
+.invest-grid {
+  display: grid;
+  grid-template-columns: 1fr;
+  gap: 1rem;
+}
+
+.invest-item {
+  background: rgba(33, 150, 243, 0.1);
+  border-radius: 8px;
+  padding: 1.25rem;
+  border-left: 3px solid #64B5F6;
+  transition: transform 0.2s ease;
+}
+
+.invest-item.warning {
+  border-left-color: #FFA726;
+  background: rgba(255, 167, 38, 0.1);
+}
+
+.invest-header {
+  display: flex;
+  align-items: center;
+  margin-bottom: 0.75rem;
+}
+
+.invest-letter {
+  background: #64B5F6;
+  color: #1E1E1E;
+  width: 28px;
+  height: 28px;
+  border-radius: 50%;
+  display: flex;
+  align-items: center;
+  justify-content: center;
+  font-weight: bold;
+  margin-right: 0.75rem;
+}
+
+.warning .invest-letter {
+  background: #FFA726;
+}
+
+/* Suggestions Refinements */
+.suggestions-list {
+  display: grid;
+  gap: 1rem;
+}
+
+.suggestion-item {
+  background: rgba(33, 150, 243, 0.1);
+  border-radius: 8px;
+  padding: 1.25rem;
+  border-left: 3px solid #64B5F6;
+}
+
+.suggestion-header {
+  color: #64B5F6;
+  font-weight: 500;
+  margin-bottom: 0.5rem;
+  font-size: 1.1rem;
+}
+
+.suggestion-content {
+  color: rgba(255, 255, 255, 0.87);
+  line-height: 1.6;
+}
+
+/* Hover effects */
+.invest-item:hover, 
+.suggestion-item:hover {
+  transform: translateY(-2px);
+}
+
+/* Responsive adjustments */
+@media (max-width: 1400px) {
+  .invest-grid {
+    grid-template-columns: 1fr;
+  }
+}
+
+.edit-textarea {
+  background: rgba(0, 0, 0, 0.2);
+  border-radius: 4px;
+}
+
+.edit-actions {
+  display: flex;
+  justify-content: flex-end;
+  gap: 0.5rem;
+  margin-top: 1rem;
+}
+
+/* Style the textarea */
+:deep(.v-field__input) {
+  color: rgba(255, 255, 255, 0.87) !important;
+  font-family: inherit !important;
+  line-height: 1.6 !important;
+}
+
+:deep(.v-field) {
+  border-color: rgba(255, 255, 255, 0.1) !important;
+}
+
+.sticky-footer {
+  position: fixed;
+  bottom: 0;
+  width: calc(50% - 2rem);
+  background: linear-gradient(
+    to top,
+    rgba(30, 30, 30, 1) 0%,
+    rgba(30, 30, 30, 0.9) 70%,
+    rgba(30, 30, 30, 0) 100%
+  );
+  padding: 1rem 0;
+  margin-top: -4rem;
+  pointer-events: none;
+  z-index: 10;
+}
+
+.footer-content {
+  display: flex;
+  flex-direction: column;
+  align-items: center;
+  gap: 0.5rem;
+  pointer-events: auto;
+  padding: 0 2rem;
+}
+
+.footer-hint {
+  font-size: 0.8rem;
+  color: rgba(255, 255, 255, 0.6);
+  font-style: italic;
+}
+
+/* Update responsive styles */
+@media (max-width: 1024px) {
+  .primary-content {
+    position: relative;
+    top: 0;
+    max-height: none;
+  }
+  
+  .sticky-footer {
+    position: fixed;
+    width: 100%;
+    left: 0;
+    right: 0;
+    margin-top: 0;
+  }
+}
+</style> 
\ No newline at end of file
diff --git a/frontend/src/views/AgileReview.vue b/frontend/src/views/AgileReview.vue
new file mode 100644
index 0000000..f402a8a
--- /dev/null
+++ b/frontend/src/views/AgileReview.vue
@@ -0,0 +1,120 @@
+<template>
+  <div class="test">
+    <div class="two-column-layout">
+      <!-- Left Column -->
+      <div class="primary-content-wrapper">
+        <div class="primary-content">
+          <div class="story-section">
+            <h3>Improved User Story</h3>
+            <div class="editable-content">
+              <v-textarea
+                v-model="analysis.improved_story.text"
+                variant="outlined"
+                auto-grow
+                rows="3"
+              />
+            </div>
+
+            <h3>Acceptance Criteria</h3>
+            <div class="editable-content">
+              <div v-for="(criteria, index) in analysis.improved_story.acceptance_criteria" 
+                   :key="index"
+                   class="criteria-item">
+                <v-textarea
+                  v-model="analysis.improved_story.acceptance_criteria[index]"
+                  variant="outlined"
+                  auto-grow
+                  rows="1"
+                />
+                <v-btn 
+                  icon="mdi-delete" 
+                  size="small"
+                  color="error" 
+                  variant="text"
+                  @click="removeCriteria(index)"
+                />
+              </div>
+              <v-btn 
+                prepend-icon="mdi-plus"
+                variant="text"
+                @click="addCriteria"
+              >
+                Add Criteria
+              </v-btn>
+            </div>
+          </div>
+        </div>
+      </div>
+
+      <!-- Right Column -->
+      <div class="analysis-panel">
+        <div class="analysis">
+          <h3>INVEST Analysis</h3>
+          <div class="invest-grid">
+            <div v-for="(item, index) in analysis.invest_analysis" 
+                 :key="index" 
+                 class="invest-item">
+              <div class="invest-header">
+                <span class="invest-letter">{{ item.letter }}</span>
+                <span class="invest-title">{{ item.title }}</span>
+              </div>
+              <div class="invest-content">{{ item.content }}</div>
+            </div>
+          </div>
+        </div>
+      </div>
+    </div>
+  </div>
+</template>
+
+<script setup lang="ts">
+import { computed } from 'vue'
+import { useStoryStore } from '@/stores/storyStore'
+
+const storyStore = useStoryStore()
+const analysis = computed(() => storyStore.currentAnalysis)
+
+const addCriteria = () => {
+  if (analysis.value) {
+    analysis.value.improved_story.acceptance_criteria.push('')
+  }
+}
+
+const removeCriteria = (index: number) => {
+  if (analysis.value) {
+    analysis.value.improved_story.acceptance_criteria.splice(index, 1)
+    if (analysis.value.improved_story.acceptance_criteria.length === 0) {
+      analysis.value.improved_story.acceptance_criteria.push('')
+    }
+  }
+}
+</script>
+
+<style>
+/* Copy all styles exactly from TestFormatView.vue */
+.two-column-layout {
+  display: grid;
+  grid-template-columns: 1fr 1fr;
+  gap: 2rem;
+  padding: 2rem;
+  max-width: 1800px;
+  margin: 0 auto;
+  min-height: 100vh;
+  position: relative;
+}
+
+/* ... rest of styles from TestFormatView.vue ... */
+
+.criteria-item {
+  display: flex;
+  align-items: start;
+  gap: 8px;
+  margin-bottom: 8px;
+}
+
+.editable-content {
+  background: rgba(0, 0, 0, 0.1);
+  border-radius: 4px;
+  padding: 1rem;
+}
+</style> 
\ No newline at end of file
diff --git a/frontend/src/views/Estimates.vue b/frontend/src/views/Estimates.vue
new file mode 100644
index 0000000..4c7e9b6
--- /dev/null
+++ b/frontend/src/views/Estimates.vue
@@ -0,0 +1,462 @@
+<template>
+  <div class="test-estimate">
+    <!-- Avatar style controls -->
+    <div class="avatar-controls">
+      <v-btn-group vertical density="compact">
+        <v-btn color="primary" size="small" @click="regenerateAvatars">Regenerate All</v-btn>
+        <v-btn color="primary" size="small" @click="cycleAvatarStyle">Change Style</v-btn>
+      </v-btn-group>
+      <div class="current-style text-secondary">Current Style: {{ currentAvatarStyle }}</div>
+    </div>
+    
+    <!-- Circle layout with centered average -->
+    <div class="estimation-circle" :style="circleStyles">
+      <div class="average-estimate">
+        <div class="average-number">{{ averageEstimate }}</div>
+        <div class="average-label">days average</div>
+      </div>
+      
+      <div 
+        v-for="(member, index) in mockTeamEstimates" 
+        :key="member.id"
+        class="team-member"
+        :style="getPositionStyle(index, mockTeamEstimates.length)"
+      >
+        <v-avatar
+          size="60"
+          class="member-avatar"
+          @click="showMemberDetails(member)"
+        >
+          <v-img :src="member.avatarUrl"></v-img>
+        </v-avatar>
+        <div class="member-info">
+          <div class="member-name">{{ member.name }}</div>
+          <div class="member-title">{{ member.title }}</div>
+          <div class="member-estimate">{{ member.estimate }} days</div>
+        </div>
+      </div>
+    </div>
+    
+    <!-- Add modal dialog -->
+    <v-dialog v-model="showDialog" max-width="400">
+      <v-card>
+        <v-card-title class="member-dialog-title">
+          <v-avatar size="48" class="mr-4">
+            <v-img :src="selectedMember?.avatarUrl"></v-img>
+          </v-avatar>
+          {{ selectedMember?.name }}
+        </v-card-title>
+        
+        <v-card-text>
+          <div class="member-dialog-role">{{ selectedMember?.title }}</div>
+          <div class="member-dialog-estimate">
+            <span class="estimate-label">Estimate:</span>
+            <span class="estimate-value">{{ selectedMember?.estimate }} days</span>
+          </div>
+          <div class="mt-4">
+            <div class="justification-label">Justification:</div>
+            <div class="justification-text">
+              {{ selectedMember?.justification || 'No justification provided.' }}
+            </div>
+          </div>
+        </v-card-text>
+        
+        <v-card-actions>
+          <v-spacer></v-spacer>
+          <v-btn color="primary" @click="showDialog = false">Close</v-btn>
+        </v-card-actions>
+      </v-card>
+    </v-dialog>
+    
+    <!-- Add back button -->
+    <div class="back-button-container">
+      <v-btn 
+        color="primary"
+        @click="router.push('/tech')"
+        class="text-uppercase"
+      >
+        Back to Tech Review
+      </v-btn>
+    </div>
+  </div>
+</template>
+
+<script setup lang="ts">
+import { ref, computed, onMounted } from 'vue'
+import { useRouter } from 'vue-router'
+
+const router = useRouter()
+
+// Avatar styles available in DiceBear
+const avatarStyles = [
+  'adventurer',
+  'adventurer-neutral',
+  'avataaars',
+  'avataaars-neutral',
+  'big-ears',
+  'big-ears-neutral',
+  'big-smile',
+  'bottts',
+  'bottts-neutral',
+  'croodles',
+  'croodles-neutral',
+  'fun-emoji',
+  'icons',
+  'identicon',
+  'initials',
+  'lorelei',
+  'lorelei-neutral',
+  'micah',
+  'miniavs',
+  'notionists',
+  'notionists-neutral',
+  'open-peeps',
+  'personas',
+  'pixel-art',
+  'pixel-art-neutral',
+  'shapes',
+  'thumbs'
+]
+
+const currentAvatarStyle = ref('adventurer')
+const currentStyleIndex = ref(0)
+
+// Mock team data
+interface TeamMember {
+  id: number
+  name: string
+  title: string
+  estimate: number
+  avatarUrl: string
+  justification?: string
+}
+
+const mockTeamEstimates = ref<TeamMember[]>([
+  {
+    id: 1,
+    name: 'Sarah Chen',
+    title: 'Senior Developer Lead',
+    estimate: 15,
+    avatarUrl: '',
+    justification: 'Need to account for integration testing and security review. Previous similar features took around 2 weeks.'
+  },
+  {
+    id: 2,
+    name: 'Jamie Lee',
+    title: 'Junior QA Analyst',
+    estimate: 7,
+    avatarUrl: '',
+    justification: 'Based on test coverage requirements and new test cases needed.'
+  },
+  {
+    id: 3,
+    name: 'Alex Thompson',
+    title: 'Senior Developer',
+    estimate: 9,
+    avatarUrl: '',
+    justification: 'Complex backend changes required. Need to refactor existing code.'
+  },
+  {
+    id: 4,
+    name: 'Michael Rodriguez',
+    title: 'Senior QA Analyst',
+    estimate: 5,
+    avatarUrl: '',
+    justification: 'Mostly regression testing needed, automation scripts can be reused.'
+  },
+  {
+    id: 5,
+    name: 'Emily Parker',
+    title: 'Mid-level Developer',
+    estimate: 7,
+    avatarUrl: '',
+    justification: 'Frontend changes are straightforward but need time for proper unit tests.'
+  },
+  {
+    id: 6,
+    name: 'David Kim',
+    title: 'UX Designer',
+    estimate: 6,
+    avatarUrl: '',
+    justification: 'Need to create and validate new interaction patterns with users.'
+  },
+  {
+    id: 7,
+    name: 'Lisa Wang',
+    title: 'Backend Developer',
+    estimate: 12,
+    avatarUrl: '',
+    justification: 'Database schema changes and API modifications required.'
+  },
+  {
+    id: 8,
+    name: 'Marcus Johnson',
+    title: 'DevOps Engineer',
+    estimate: 8,
+    avatarUrl: '',
+    justification: 'Need to update deployment pipeline and add new monitoring.'
+  }
+])
+
+// Initial random positions for animation
+const initialPositions = ref(new Map())
+
+const getRandomPosition = () => {
+  const randomX = (Math.random() - 0.5) * window.innerWidth
+  const randomY = (Math.random() - 0.5) * window.innerHeight
+  return { x: randomX, y: randomY }
+}
+
+// Initialize random positions when team changes
+const initializePositions = () => {
+  mockTeamEstimates.value.forEach(member => {
+    initialPositions.value.set(member.id, getRandomPosition())
+  })
+  // Trigger reflow to ensure animation works
+  setTimeout(() => {
+    initialPositions.value = new Map()
+  }, 50)
+}
+
+// Calculate average estimate
+const averageEstimate = computed(() => {
+  const total = mockTeamEstimates.value.reduce((sum, member) => sum + member.estimate, 0)
+  return (total / mockTeamEstimates.value.length).toFixed(1)
+})
+
+// Calculate circle size based on viewport
+const circleStyles = computed(() => {
+  const size = Math.min(window.innerWidth * 0.8, 800)
+  return {
+    width: `${size}px`,
+    height: `${size}px`
+  }
+})
+
+// Calculate position for each team member
+const getPositionStyle = (index: number, total: number) => {
+  const angle = (index * 360) / total - 90 // Start from top
+  const radius = 250 // Increased from 200 to 250 for better spacing
+  
+  // Get initial random position if it exists
+  const initialPos = initialPositions.value.get(mockTeamEstimates.value[index].id)
+  
+  if (initialPos) {
+    return {
+      position: 'absolute',
+      left: `${initialPos.x}px`,
+      top: `${initialPos.y}px`,
+      transform: 'translate(-50%, -50%)',
+      transition: 'none'
+    }
+  }
+  
+  const angleInRad = (angle * Math.PI) / 180
+  const x = Math.cos(angleInRad) * radius
+  const y = Math.sin(angleInRad) * radius
+  
+  return {
+    position: 'absolute',
+    left: '50%',
+    top: '50%',
+    transform: `translate(calc(-50% + ${x}px), calc(-50% + ${y}px))`,
+    transition: 'all 1s cubic-bezier(0.34, 1.56, 0.64, 1)'
+  }
+}
+
+// Generate new avatar URLs
+const regenerateAvatars = () => {
+  mockTeamEstimates.value.forEach(member => {
+    const seed = Math.random().toString(36).substring(7)
+    member.avatarUrl = `https://api.dicebear.com/7.x/${currentAvatarStyle.value}/svg?seed=${seed}`
+  })
+  initializePositions()
+}
+
+// Cycle through avatar styles
+const cycleAvatarStyle = () => {
+  currentStyleIndex.value = (currentStyleIndex.value + 1) % avatarStyles.length
+  currentAvatarStyle.value = avatarStyles[currentStyleIndex.value]
+  regenerateAvatars()
+}
+
+// Add these refs for dialog control
+const showDialog = ref(false)
+const selectedMember = ref<TeamMember | null>(null)
+
+// Update the showMemberDetails function
+const showMemberDetails = (member: TeamMember) => {
+  selectedMember.value = member
+  showDialog.value = true
+}
+
+// Initialize avatars on mount
+onMounted(() => {
+  regenerateAvatars()
+})
+</script>
+
+<style>
+.test-estimate {
+  max-width: 1000px;
+  margin: 0 auto;
+  padding: 0 20px;
+  position: relative;
+  display: flex;
+  flex-direction: column;
+}
+
+.avatar-controls {
+  position: fixed;
+  bottom: 1.5rem;
+  left: 1.5rem;
+  z-index: 1000;
+  scale: 0.9;
+}
+
+.current-style {
+  margin-top: 0.3rem;
+  font-size: 0.75rem;
+  opacity: 0.7;
+}
+
+.estimation-circle {
+  position: relative;
+  margin: -2rem auto 0;
+  padding-top: 2rem;
+}
+
+.average-estimate {
+  position: absolute;
+  top: 50%;
+  left: 50%;
+  transform: translate(-50%, -50%);
+  text-align: center;
+  background: rgba(33, 150, 243, 0.1);
+  padding: 1rem;
+  border-radius: 50%;
+  width: 120px;
+  height: 120px;
+  display: flex;
+  flex-direction: column;
+  justify-content: center;
+  align-items: center;
+}
+
+.average-number {
+  font-size: 2rem;
+  font-weight: bold;
+  color: #64B5F6;
+}
+
+.average-label {
+  font-size: 0.8rem;
+  opacity: 0.87;
+  color: rgba(255, 255, 255, 0.87);
+}
+
+.team-member {
+  position: absolute;
+  text-align: center;
+  transition: all 1s cubic-bezier(0.34, 1.56, 0.64, 1);
+  width: 120px;
+}
+
+.member-avatar {
+  margin-bottom: 0.5rem;
+  cursor: pointer;
+  transition: transform 0.2s;
+  background: white;
+  opacity: 0;
+  animation: fadeIn 0.5s forwards;
+  animation-delay: 0.5s;
+}
+
+.member-avatar:hover {
+  transform: scale(1.1);
+}
+
+.member-info {
+  font-size: 0.8rem;
+  white-space: nowrap;
+  color: rgba(255, 255, 255, 0.87);
+}
+
+.member-name {
+  font-weight: bold;
+  color: rgba(255, 255, 255, 0.87);
+}
+
+.member-title {
+  opacity: 0.7;
+  font-size: 0.7rem;
+  margin: 0.2rem 0;
+  color: rgba(255, 255, 255, 0.7);
+}
+
+.member-estimate {
+  color: #64B5F6;
+  font-weight: bold;
+}
+
+@keyframes fadeIn {
+  from { opacity: 0; }
+  to { opacity: 1; }
+}
+
+@media (max-width: 768px) {
+  .avatar-controls {
+    bottom: 1rem;
+    left: 1rem;
+  }
+  
+  .current-style {
+    font-size: 0.7rem;
+  }
+}
+
+.member-dialog-title {
+  display: flex;
+  align-items: center;
+  padding: 1rem;
+}
+
+.member-dialog-role {
+  color: var(--v-medium-emphasis-opacity);
+  font-size: 0.9rem;
+  margin-bottom: 1rem;
+}
+
+.member-dialog-estimate {
+  display: flex;
+  align-items: center;
+  gap: 0.5rem;
+  margin-top: 0.5rem;
+}
+
+.estimate-label {
+  font-weight: 500;
+}
+
+.estimate-value {
+  color: var(--v-theme-primary);
+  font-weight: bold;
+}
+
+.justification-label {
+  font-weight: 500;
+  margin-bottom: 0.5rem;
+}
+
+.justification-text {
+  line-height: 1.5;
+  color: var(--v-medium-emphasis-opacity);
+}
+
+.back-button-container {
+  position: fixed;
+  bottom: 2rem;
+  right: 2rem;
+  z-index: 10;
+}
+</style> 
\ No newline at end of file
diff --git a/frontend/src/views/HomeView.vue b/frontend/src/views/HomeView.vue
new file mode 100644
index 0000000..6f7da1c
--- /dev/null
+++ b/frontend/src/views/HomeView.vue
@@ -0,0 +1,9 @@
+<template>
+  <div class="home">
+    <h1>Welcome to AgileStories</h1>
+    <nav>
+      <router-link to="/test">Go to Test Page</router-link>
+    </nav>
+    <!-- ... rest of your home page content ... -->
+  </div>
+</template> 
\ No newline at end of file
diff --git a/frontend/src/views/StoryInput copy.vue b/frontend/src/views/StoryInput copy.vue
new file mode 100644
index 0000000..2ef734d
--- /dev/null
+++ b/frontend/src/views/StoryInput copy.vue	
@@ -0,0 +1,249 @@
+<template>
+  <div class="test">
+    <div class="two-column-layout">
+      <!-- Left Column: Primary Content -->
+      <div class="primary-content-wrapper">
+        <div class="primary-content">
+          <div class="story-section">
+            <h3>User Story</h3>
+            <div class="editable-content">
+              <v-textarea
+                v-model="story.text"
+                label="As a [user type], I want [goal], so that [benefit]"
+                variant="outlined"
+                auto-grow
+                rows="3"
+              />
+            </div>
+
+            <h3>Acceptance Criteria</h3>
+            <div class="editable-content">
+              <div v-for="(criteria, index) in story.acceptance_criteria" 
+                   :key="index"
+                   class="criteria-item">
+                <v-textarea
+                  v-model="story.acceptance_criteria[index]"
+                  variant="outlined"
+                  auto-grow
+                  rows="1"
+                />
+                <v-btn 
+                  icon="mdi-delete" 
+                  size="small"
+                  color="error" 
+                  variant="text"
+                  @click="removeCriteria(index)"
+                />
+              </div>
+              <v-btn 
+                prepend-icon="mdi-plus"
+                variant="text"
+                @click="addCriteria"
+              >
+                Add Criteria
+              </v-btn>
+            </div>
+          </div>
+        </div>
+
+        <div class="sticky-footer">
+          <div class="footer-content">
+            <v-btn 
+              color="primary" 
+              :loading="loading"
+              :disabled="!isValid"
+              @click="submitStory"
+              size="large"
+            >
+              Analyze Story
+            </v-btn>
+          </div>
+        </div>
+      </div>
+
+      <!-- Right Column: Help Panel -->
+      <div class="analysis-panel">
+        <div class="analysis">
+          <h3>Writing Tips</h3>
+          <div class="invest-grid">
+            <div v-for="(tip, index) in writingTips" 
+                 :key="index" 
+                 class="invest-item">
+              <div class="invest-header">
+                <span class="invest-letter">{{ tip.letter }}</span>
+                <span class="invest-title">{{ tip.title }}</span>
+              </div>
+              <div class="invest-content">{{ tip.content }}</div>
+            </div>
+          </div>
+        </div>
+      </div>
+    </div>
+  </div>
+</template>
+
+<script setup>
+import { ref, computed } from 'vue'
+import { useRouter } from 'vue-router'
+import { useStoryStore } from '@/stores/storyStore'
+import { submitStoryForAgileReview } from '@/api/storyApi'
+
+const router = useRouter()
+const storyStore = useStoryStore()
+const loading = ref(false)
+
+const story = ref({
+  text: '',
+  acceptance_criteria: [''],
+  context: '',
+  version: 1
+})
+
+const writingTips = [
+  {
+    letter: 'U',
+    title: 'User',
+    content: 'Clearly identify who the user is (e.g., customer, admin, guest)'
+  },
+  {
+    letter: 'G',
+    title: 'Goal',
+    content: 'State what the user wants to accomplish'
+  },
+  {
+    letter: 'B',
+    title: 'Benefit',
+    content: 'Explain why this is valuable to the user'
+  },
+  {
+    letter: 'A',
+    title: 'Acceptance',
+    content: 'Write clear, testable acceptance criteria'
+  }
+]
+
+const isValid = computed(() => {
+  return story.value.text.trim() !== '' && 
+         story.value.acceptance_criteria.some(c => c.trim() !== '')
+})
+
+const addCriteria = () => {
+  story.value.acceptance_criteria.push('')
+}
+
+const removeCriteria = (index) => {
+  story.value.acceptance_criteria.splice(index, 1)
+  if (story.value.acceptance_criteria.length === 0) {
+    story.value.acceptance_criteria.push('')
+  }
+}
+
+const submitStory = async () => {
+  if (!isValid.value) return
+  
+  loading.value = true
+  try {
+    const result = await submitStoryForAgileReview(story.value)
+    storyStore.setCurrentAnalysis(result)
+    router.push('/agile')
+  } catch (error) {
+    console.error('Error submitting story:', error)
+  } finally {
+    loading.value = false
+  }
+}
+</script>
+
+<style scoped>
+.two-column-layout {
+  display: grid;
+  grid-template-columns: 1fr 1fr;
+  gap: 2rem;
+  padding: 2rem;
+  max-width: 1800px;
+  margin: 0 auto;
+  min-height: 100vh;
+  position: relative;
+}
+
+.primary-content-wrapper {
+  display: flex;
+  flex-direction: column;
+  min-height: 100%;
+}
+
+.primary-content {
+  flex-grow: 1;
+  margin-bottom: 2rem;
+}
+
+.sticky-footer {
+  position: sticky;
+  bottom: 0;
+  background: rgb(18, 18, 18);
+  padding: 1rem 0;
+  width: 100%;
+  z-index: 1;
+}
+
+.footer-content {
+  display: flex;
+  justify-content: flex-end;
+  padding: 0 1rem;
+}
+
+.criteria-item {
+  display: flex;
+  align-items: start;
+  gap: 8px;
+  margin-bottom: 8px;
+}
+
+.editable-content {
+  background: rgba(0, 0, 0, 0.1);
+  border-radius: 4px;
+  padding: 1rem;
+}
+
+h3 {
+  color: #64B5F6;
+  margin-bottom: 1rem;
+}
+
+.invest-grid {
+  display: flex;
+  flex-direction: column;
+  gap: 1rem;
+}
+
+.invest-item {
+  background: rgba(48, 38, 25, 1);
+  border-radius: 8px;
+  padding: 1.5rem;
+  border-left: 4px solid #FFA726;
+}
+
+.invest-header {
+  display: flex;
+  align-items: center;
+  gap: 1rem;
+  margin-bottom: 0.5rem;
+}
+
+.invest-letter {
+  background: #FFA726;
+  color: black;
+  width: 32px;
+  height: 32px;
+  border-radius: 50%;
+  display: flex;
+  align-items: center;
+  justify-content: center;
+  font-weight: bold;
+}
+
+.invest-title {
+  font-size: 1.2rem;
+  font-weight: 500;
+}
+</style> 
\ No newline at end of file
diff --git a/frontend/src/views/StoryInput.vue b/frontend/src/views/StoryInput.vue
new file mode 100644
index 0000000..45f8003
--- /dev/null
+++ b/frontend/src/views/StoryInput.vue
@@ -0,0 +1,292 @@
+<template>
+  <div class="test">
+    <div class="two-column-layout">
+      <!-- Left Column: Primary Content -->
+      <div class="primary-content-wrapper">
+        <div class="primary-content">
+          <div class="story-section">
+            <h3>Title</h3>
+            <div class="editable-content">
+              <v-text-field
+                v-model="story.title"
+                label="Enter a descriptive title"
+                variant="outlined"
+              />
+            </div>
+
+            <h3>User Story</h3>
+            <div class="editable-content">
+              <v-textarea
+                v-model="story.text"
+                label="As a [user type], I want [goal], so that [benefit]"
+                variant="outlined"
+                auto-grow
+                rows="3"
+              />
+            </div>
+
+            <h3>Acceptance Criteria</h3>
+            <div class="editable-content">
+              <div v-for="(criteria, index) in story.acceptance_criteria" 
+                   :key="index"
+                   class="criteria-item">
+                <v-textarea
+                  v-model="story.acceptance_criteria[index]"
+                  variant="outlined"
+                  auto-grow
+                  rows="1"
+                />
+                <v-btn 
+                  icon="mdi-delete" 
+                  size="small"
+                  color="error" 
+                  variant="text"
+                  @click="removeCriteria(index)"
+                />
+              </div>
+              <v-btn 
+                prepend-icon="mdi-plus"
+                variant="text"
+                @click="addCriteria"
+              >
+                Add Criteria
+              </v-btn>
+            </div>
+          </div>
+        </div>
+
+        <div class="sticky-footer">
+          <div class="footer-content">
+            <v-btn 
+              color="primary" 
+              :loading="loading"
+              :disabled="!isValid"
+              @click="submitStory"
+              size="large"
+            >
+              Analyze Story
+            </v-btn>
+          </div>
+        </div>
+      </div>
+
+      <!-- Right Column: Help Panel -->
+      <div class="analysis-panel">
+        <div class="analysis">
+          <h3>Writing Tips</h3>
+          <div class="invest-grid">
+            <div v-for="(tip, index) in writingTips" 
+                 :key="index" 
+                 class="invest-item">
+              <div class="invest-header">
+                <span class="invest-letter">{{ tip.letter }}</span>
+                <span class="invest-title">{{ tip.title }}</span>
+              </div>
+              <div class="invest-content">{{ tip.content }}</div>
+            </div>
+          </div>
+        </div>
+      </div>
+    </div>
+  </div>
+</template>
+
+<script setup>
+import { ref, computed } from 'vue'
+import { useRouter } from 'vue-router'
+import { useStoryStore } from '@/stores/storyStore'
+import { submitStoryForAgileReview } from '@/api/storyApi'
+
+const router = useRouter()
+const storyStore = useStoryStore()
+const loading = ref(false)
+
+const story = ref({
+  title: '',
+  text: '',
+  acceptance_criteria: ['']
+})
+
+const writingTips = [
+  {
+    letter: 'U',
+    title: 'User',
+    content: 'Clearly identify who the user is (e.g., customer, admin, guest)'
+  },
+  {
+    letter: 'G',
+    title: 'Goal',
+    content: 'State what the user wants to accomplish'
+  },
+  {
+    letter: 'B',
+    title: 'Benefit',
+    content: 'Explain why this is valuable to the user'
+  },
+  {
+    letter: 'A',
+    title: 'Acceptance',
+    content: 'Write clear, testable acceptance criteria'
+  }
+]
+
+const isValid = computed(() => {
+  return story.value.title.trim() !== '' &&
+         story.value.text.trim() !== '' &&
+         story.value.acceptance_criteria.some(c => c.trim() !== '')
+})
+
+const addCriteria = () => {
+  story.value.acceptance_criteria.push('')
+}
+
+const removeCriteria = (index) => {
+  story.value.acceptance_criteria.splice(index, 1)
+  if (story.value.acceptance_criteria.length === 0) {
+    story.value.acceptance_criteria.push('')
+  }
+}
+
+const submitStory = async () => {
+  if (!isValid.value) return
+  
+  loading.value = true
+  try {
+    const result = await submitStoryForAgileReview(story.value)
+    storyStore.setCurrentAnalysis(result)
+    router.push('/agile')
+  } catch (error) {
+    console.error('Error submitting story:', error)
+  } finally {
+    loading.value = false
+  }
+}
+
+const guidelines = {
+  story: {
+    title: 'Story Writing Guidelines',
+    items: [
+      {
+        icon: 'mdi-format-quote-open',
+        header: 'User Story Format',
+        content: [
+          { prefix: 'As a', text: '[type of user]' },
+          { prefix: 'I want to', text: '[perform some action]' },
+          { prefix: 'So that', text: '[achieve some benefit]' }
+        ]
+      },
+      {
+        icon: 'mdi-lightbulb',
+        header: 'Acceptance Criteria Tips',
+        content: [
+          { text: 'Use clear, specific language' },
+          { text: 'One criterion per line' },
+          { text: 'Include all success conditions' },
+          { text: 'Consider edge cases' },
+          { text: 'Make them testable' }
+        ]
+      }
+    ]
+  }
+}
+</script>
+
+<style scoped>
+.two-column-layout {
+  display: grid;
+  grid-template-columns: 1fr 1fr;
+  gap: 2rem;
+  padding: 2rem;
+  max-width: 1800px;
+  margin: 0 auto;
+  min-height: 100vh;
+}
+
+.primary-content-wrapper {
+  width: 100%;
+  min-width: 0;
+}
+
+.primary-content {
+  flex-grow: 1;
+  margin-bottom: 2rem;
+}
+
+.sticky-footer {
+  position: sticky;
+  bottom: 0;
+  background: rgb(18, 18, 18);
+  padding: 1rem 0;
+  width: 100%;
+  z-index: 1;
+}
+
+.footer-content {
+  display: flex;
+  justify-content: flex-end;
+  padding: 0 1rem;
+}
+
+.criteria-item {
+  display: flex;
+  align-items: start;
+  gap: 8px;
+  margin-bottom: 8px;
+}
+
+.editable-content {
+  background: rgba(0, 0, 0, 0.1);
+  border-radius: 4px;
+  padding: 1rem;
+}
+
+h3 {
+  color: #64B5F6;
+  margin-bottom: 1rem;
+}
+
+.invest-grid {
+  display: flex;
+  flex-direction: column;
+  gap: 1rem;
+}
+
+.invest-item {
+  background: rgba(48, 38, 25, 1);
+  border-radius: 8px;
+  padding: 1.5rem;
+  border-left: 4px solid #FFA726;
+}
+
+.invest-header {
+  display: flex;
+  align-items: center;
+  gap: 1rem;
+  margin-bottom: 0.5rem;
+}
+
+.invest-letter {
+  background: #FFA726;
+  color: black;
+  width: 32px;
+  height: 32px;
+  border-radius: 50%;
+  display: flex;
+  align-items: center;
+  justify-content: center;
+  font-weight: bold;
+}
+
+.invest-title {
+  font-size: 1.2rem;
+  font-weight: 500;
+}
+
+.analysis-panel {
+  width: 100%;
+  min-width: 0;
+  background: rgba(48, 38, 25, 1);
+  border-radius: 8px;
+  padding: 1.5rem;
+}
+</style> 
\ No newline at end of file
diff --git a/frontend/src/views/StoryTestView.vue b/frontend/src/views/StoryTestView.vue
new file mode 100644
index 0000000..97295d4
--- /dev/null
+++ b/frontend/src/views/StoryTestView.vue
@@ -0,0 +1,45 @@
+<template>
+  <div class="story-test">
+    <h2>Story Generator Test</h2>
+    <div class="story-input">
+      <textarea 
+        v-model="storyInput"
+        placeholder="Enter your user story description..."
+        rows="4"
+      ></textarea>
+      <button 
+        @click="generateStory"
+        :disabled="isProcessing"
+      >
+        {{ isProcessing ? 'Processing...' : 'Generate Story' }}
+      </button>
+    </div>
+    
+    <div v-if="generatedStory" class="story-output">
+      <h3>Generated Story</h3>
+      <pre>{{ generatedStory }}</pre>
+    </div>
+  </div>
+</template>
+
+<script setup lang="ts">
+import { ref } from 'vue'
+
+const storyInput = ref('')
+const generatedStory = ref('')
+const isProcessing = ref(false)
+
+const generateStory = async () => {
+  isProcessing.value = true
+  try {
+    // TODO: Implement API call to backend
+    // For now, just simulate API call
+    await new Promise(resolve => setTimeout(resolve, 1000))
+    generatedStory.value = `As a user\nI want to ${storyInput.value}\nSo that I can improve my workflow`
+  } catch (error) {
+    console.error('Error generating story:', error)
+  } finally {
+    isProcessing.value = false
+  }
+}
+</script> 
\ No newline at end of file
diff --git a/frontend/src/views/TechReview.vue b/frontend/src/views/TechReview.vue
new file mode 100644
index 0000000..253dd60
--- /dev/null
+++ b/frontend/src/views/TechReview.vue
@@ -0,0 +1,764 @@
+<template>
+  <div class="test">
+    <div class="two-column-layout">
+      <!-- Left Column -->
+      <div class="primary-content-wrapper">
+        <div class="primary-content">
+          <!-- Add Story and AC sections -->
+          <div class="story-section">
+            <h3>Technical Review Modifications</h3>
+            
+            <!-- Story Section -->
+            <h4 class="mt-4">User Story</h4>
+            <div class="editable-content">
+              <template v-if="!editingStory">
+                <pre>{{ mockTechReviewResult.improved_story.text }}</pre>
+                <v-btn 
+                  size="small" 
+                  color="primary" 
+                  class="edit-btn"
+                  icon="mdi-pencil"
+                  @click="startEditingStory"
+                ></v-btn>
+              </template>
+              <template v-else>
+                <v-textarea
+                  v-model="editedStory"
+                  auto-grow
+                  variant="outlined"
+                  class="edit-textarea"
+                ></v-textarea>
+                <div class="edit-actions">
+                  <v-btn 
+                    size="small" 
+                    color="success" 
+                    @click="saveStory"
+                    class="mr-2"
+                  >Save</v-btn>
+                  <v-btn 
+                    size="small" 
+                    color="error" 
+                    @click="cancelEditStory"
+                  >Cancel</v-btn>
+                </div>
+              </template>
+            </div>
+            
+            <!-- AC Section -->
+            <h4 class="mt-4">Acceptance Criteria</h4>
+            <div class="editable-content">
+              <template v-if="!editingAC">
+                <ul>
+                  <li v-for="(criterion, index) in mockTechReviewResult.improved_story.acceptance_criteria" 
+                      :key="index">
+                    {{ criterion }}
+                  </li>
+                </ul>
+                <v-btn 
+                  size="small" 
+                  color="primary" 
+                  class="edit-btn"
+                  icon="mdi-pencil"
+                  @click="startEditingAC"
+                ></v-btn>
+              </template>
+              <template v-else>
+                <v-textarea
+                  v-model="editedAC"
+                  auto-grow
+                  variant="outlined"
+                  placeholder="One acceptance criterion per line"
+                  class="edit-textarea"
+                ></v-textarea>
+                <div class="edit-actions">
+                  <v-btn 
+                    size="small" 
+                    color="success" 
+                    @click="saveAC"
+                    class="mr-2"
+                  >Save</v-btn>
+                  <v-btn 
+                    size="small" 
+                    color="error" 
+                    @click="cancelEditAC"
+                  >Cancel</v-btn>
+                </div>
+              </template>
+            </div>
+
+            <!-- After AC section and before Implementation Details -->
+            <h4 class="mt-4">Selected Implementation Details</h4>
+            <div class="editable-content">
+              <div v-if="selectedDetails.length === 0" class="no-details">
+                No implementation details added yet. Select from the sections below.
+              </div>
+              <div v-else class="selected-details">
+                <div v-for="(detail, index) in selectedDetails" 
+                     :key="index"
+                     class="selected-detail">
+                  <div class="detail-content">
+                    <v-icon size="small" :color="getDetailColor(detail.type)" class="mr-2">
+                      {{ getDetailIcon(detail.type) }}
+                    </v-icon>
+                    {{ detail.text }}
+                  </div>
+                  <v-btn 
+                    size="x-small" 
+                    color="error" 
+                    variant="text"
+                    icon="mdi-close"
+                    @click="removeDetail(index)"
+                  ></v-btn>
+                </div>
+              </div>
+            </div>
+
+            <!-- Implementation Details Section -->
+            <h3 class="mt-6">Implementation Details</h3>
+            <div class="tech-section">
+              <h4>Frontend</h4>
+              <div class="task-list">
+                <div v-for="(task, index) in availableDetails.frontend" 
+                     :key="'fe-'+index"
+                     class="task-item"
+                     @click="toggleDetail('frontend', task)">
+                  <v-icon size="small" color="primary" class="mr-2">mdi-code-tags</v-icon>
+                  {{ task }}
+                </div>
+              </div>
+
+              <h4>Backend</h4>
+              <div class="task-list">
+                <div v-for="(task, index) in availableDetails.backend" 
+                     :key="'be-'+index"
+                     class="task-item"
+                     @click="toggleDetail('backend', task)">
+                  <v-icon size="small" color="success" class="mr-2">mdi-server</v-icon>
+                  {{ task }}
+                </div>
+              </div>
+
+              <h4>Database</h4>
+              <div class="task-list">
+                <div v-for="(task, index) in availableDetails.database" 
+                     :key="'db-'+index"
+                     class="task-item"
+                     @click="toggleDetail('database', task)">
+                  <v-icon size="small" color="warning" class="mr-2">mdi-database</v-icon>
+                  {{ task }}
+                </div>
+              </div>
+            </div>
+
+            <h3 class="mt-6">Tech Lead Estimate</h3>
+            <div class="effort-grid">
+              <div v-for="(effort, key) in mockTechReviewResult.estimated_effort" 
+                   :key="key"
+                   class="effort-item"
+                   :class="{ 'effort-total': key === 'total' }">
+                <div class="effort-label">{{ key }}</div>
+                <div class="effort-value">{{ effort }}</div>
+              </div>
+            </div>
+          </div>
+        </div>
+
+        <!-- Sticky footer -->
+        <div class="sticky-footer">
+          <div class="footer-content">
+            <div class="footer-buttons">
+              <v-btn 
+                color="success" 
+                class="mr-4"
+                @click="acceptTechReview"
+              >
+                ACCEPT TECH REVIEW
+              </v-btn>
+              <v-btn 
+                color="primary"
+                @click="submitForEstimation"
+              >
+                SEND FOR ESTIMATION
+              </v-btn>
+            </div>
+            <div class="footer-hint" v-if="editingStory || editingAC">
+              Save your changes to enable actions
+            </div>
+          </div>
+        </div>
+      </div>
+
+      <!-- Right Column: Analysis -->
+      <div class="analysis-panel">
+        <div class="technical-analysis">
+          <h3>Technical Analysis</h3>
+          <div class="analysis-grid">
+            <div v-for="(analysis, key) in mockTechReviewResult.technical_analysis" 
+                 :key="key"
+                 class="analysis-item">
+              <div class="analysis-header">
+                <span class="analysis-title">{{ key }}</span>
+                <div class="score-badge" :class="getScoreClass(analysis.score)">
+                  {{ analysis.score }}/10
+                </div>
+              </div>
+              <div class="analysis-content">{{ analysis.explanation }}</div>
+            </div>
+          </div>
+        </div>
+
+        <div class="risks mt-6">
+          <h3>Risks & Considerations</h3>
+          <div class="risks-grid">
+            <div v-for="(risk, index) in mockTechReviewResult.risks_and_considerations" 
+                 :key="index"
+                 class="risk-item">
+              <div class="risk-header">
+                <v-icon color="warning" class="mr-2">mdi-alert</v-icon>
+                {{ risk.category }}
+              </div>
+              <div class="risk-description">{{ risk.description }}</div>
+              <div class="risk-mitigation">
+                <v-icon color="success" size="small" class="mr-2">mdi-shield</v-icon>
+                {{ risk.mitigation }}
+              </div>
+            </div>
+          </div>
+        </div>
+
+        <div class="recommendations mt-6">
+          <h3>Recommendations</h3>
+          <div class="recommendations-list">
+            <div v-for="(rec, index) in mockTechReviewResult.recommendations" 
+                 :key="index"
+                 class="recommendation-item">
+              <v-icon color="info" size="small" class="mr-2">mdi-lightbulb</v-icon>
+              {{ rec }}
+            </div>
+          </div>
+        </div>
+      </div>
+    </div>
+  </div>
+</template>
+
+<script setup lang="ts">
+import { ref } from 'vue'
+import { useRouter } from 'vue-router'
+import { mockTechReviewResult } from '@/mocks/mockTechReviewData'
+
+const router = useRouter()
+const loading = ref(false)
+
+// Story editing
+const editingStory = ref(false)
+const editedStory = ref('')
+
+const startEditingStory = () => {
+  editedStory.value = mockTechReviewResult.improved_story.text
+  editingStory.value = true
+}
+
+const saveStory = () => {
+  mockTechReviewResult.improved_story.text = editedStory.value
+  editingStory.value = false
+}
+
+const cancelEditStory = () => {
+  editingStory.value = false
+}
+
+// Acceptance Criteria editing
+const editingAC = ref(false)
+const editedAC = ref('')
+
+const startEditingAC = () => {
+  editedAC.value = mockTechReviewResult.improved_story.acceptance_criteria.join('\n')
+  editingAC.value = true
+}
+
+const saveAC = () => {
+  mockTechReviewResult.improved_story.acceptance_criteria = editedAC.value
+    .split('\n')
+    .filter(line => line.trim())
+  editingAC.value = false
+}
+
+const cancelEditAC = () => {
+  editingAC.value = false
+}
+
+// Keep existing getScoreClass function
+const getScoreClass = (score: number): string => {
+  if (score >= 8) return 'score-high'
+  if (score >= 5) return 'score-medium'
+  return 'score-low'
+}
+
+interface ImplementationDetail {
+  type: 'frontend' | 'backend' | 'database'
+  text: string
+}
+
+// Store original details and selected details
+const originalDetails = ref({
+  frontend: [...mockTechReviewResult.implementation_details.frontend],
+  backend: [...mockTechReviewResult.implementation_details.backend],
+  database: [...mockTechReviewResult.implementation_details.database]
+})
+
+const availableDetails = ref({
+  frontend: [...mockTechReviewResult.implementation_details.frontend],
+  backend: [...mockTechReviewResult.implementation_details.backend],
+  database: [...mockTechReviewResult.implementation_details.database]
+})
+
+const selectedDetails = ref<ImplementationDetail[]>([])
+
+const toggleDetail = (type: 'frontend' | 'backend' | 'database', text: string) => {
+  // Remove from available list and add to selected
+  const typeList = availableDetails.value[type]
+  const index = typeList.indexOf(text)
+  if (index >= 0) {
+    typeList.splice(index, 1)
+    selectedDetails.value.push({ type, text })
+  }
+}
+
+const removeDetail = (index: number) => {
+  const detail = selectedDetails.value[index]
+  // Add back to original section
+  availableDetails.value[detail.type].push(detail.text)
+  // Sort to maintain original order
+  availableDetails.value[detail.type].sort((a, b) => {
+    return originalDetails.value[detail.type].indexOf(a) - 
+           originalDetails.value[detail.type].indexOf(b)
+  })
+  // Remove from selected
+  selectedDetails.value.splice(index, 1)
+}
+
+const getDetailIcon = (type: string): string => {
+  switch (type) {
+    case 'frontend': return 'mdi-code-tags'
+    case 'backend': return 'mdi-server'
+    case 'database': return 'mdi-database'
+    default: return 'mdi-code-tags'
+  }
+}
+
+const getDetailColor = (type: string): string => {
+  switch (type) {
+    case 'frontend': return 'primary'
+    case 'backend': return 'success'
+    case 'database': return 'warning'
+    default: return 'primary'
+  }
+}
+
+const acceptTechReview = async () => {
+  loading.value = true
+  try {
+    // Simulate API call
+    await new Promise(resolve => setTimeout(resolve, 1000))
+    // Just log for now since we don't have the accept endpoint
+    console.log('Tech review accepted')
+    // Don't navigate
+  } catch (error) {
+    console.error('Error accepting tech review:', error)
+  } finally {
+    loading.value = false
+  }
+}
+
+const submitForEstimation = async () => {
+  loading.value = true
+  try {
+    await new Promise(resolve => setTimeout(resolve, 1000))
+    router.push('/estimate')
+  } catch (error) {
+    console.error('Error submitting for estimation:', error)
+  } finally {
+    loading.value = false
+  }
+}
+</script>
+
+<style>
+/* Base layout styles (similar to TestFormatView) */
+.two-column-layout {
+  display: grid;
+  grid-template-columns: 1fr 1fr;
+  gap: 2rem;
+  padding: 2rem;
+  max-width: 1800px;
+  margin: 0 auto;
+  min-height: 100vh;
+  position: relative;
+}
+
+.primary-content-wrapper {
+  position: relative;
+  height: 100%;
+  display: flex;
+  flex-direction: column;
+}
+
+.primary-content {
+  position: sticky;
+  top: 2rem;
+  background: rgba(255, 255, 255, 0.05);
+  border-radius: 12px;
+  padding: 2rem;
+  max-height: calc(100vh - 8rem);
+  overflow-y: auto;
+  flex-grow: 1;
+}
+
+/* Implementation Details Styles */
+.tech-section {
+  margin-top: 1rem;
+}
+
+.tech-section h4 {
+  color: #64B5F6;
+  margin: 1.5rem 0 1rem;
+  font-size: 1.1rem;
+}
+
+.task-list {
+  display: grid;
+  gap: 0.75rem;
+}
+
+.task-item {
+  cursor: pointer;
+  display: flex;
+  align-items: center;
+  transition: all 0.2s ease;
+  padding: 0.75rem 1rem;
+  border-radius: 6px;
+  background: rgba(33, 150, 243, 0.1);
+}
+
+.task-item:hover {
+  background: rgba(33, 150, 243, 0.2);
+  transform: translateY(-1px);
+}
+
+/* Effort Grid */
+.effort-grid {
+  display: grid;
+  grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
+  gap: 1rem;
+  margin-top: 1rem;
+  background: rgba(255, 255, 255, 0.05);
+  padding: 1rem;
+  border-radius: 8px;
+  border-left: 3px solid #4CAF50;
+}
+
+.effort-item {
+  background: rgba(33, 150, 243, 0.1);
+  padding: 1rem;
+  border-radius: 8px;
+  text-align: center;
+}
+
+.effort-total {
+  background: rgba(33, 150, 243, 0.2);
+  font-weight: bold;
+}
+
+.effort-label {
+  color: #64B5F6;
+  font-size: 0.9rem;
+  text-transform: uppercase;
+  margin-bottom: 0.5rem;
+}
+
+.effort-value {
+  font-size: 1.2rem;
+  font-weight: 500;
+  color: rgba(255, 255, 255, 0.87);
+}
+
+/* Analysis Panel Styles */
+.analysis-panel {
+  background: rgba(255, 255, 255, 0.05);
+  border-radius: 12px;
+  padding: 2rem;
+}
+
+.analysis-grid {
+  display: grid;
+  gap: 1rem;
+  margin-top: 1rem;
+}
+
+.analysis-item {
+  background: rgba(33, 150, 243, 0.1);
+  padding: 1.25rem;
+  border-radius: 8px;
+}
+
+.analysis-header {
+  display: flex;
+  justify-content: space-between;
+  align-items: center;
+  margin-bottom: 0.75rem;
+}
+
+.analysis-title {
+  color: #64B5F6;
+  font-weight: 500;
+  font-size: 1.1rem;
+  text-transform: capitalize;
+}
+
+.score-badge {
+  padding: 0.25rem 0.75rem;
+  border-radius: 12px;
+  font-weight: 500;
+  font-size: 0.9rem;
+}
+
+.score-high {
+  background: rgba(76, 175, 80, 0.2);
+  color: #81C784;
+}
+
+.score-medium {
+  background: rgba(255, 152, 0, 0.2);
+  color: #FFB74D;
+}
+
+.score-low {
+  background: rgba(244, 67, 54, 0.2);
+  color: #E57373;
+}
+
+/* Risks Styles */
+.risks-grid {
+  display: grid;
+  gap: 1rem;
+  margin-top: 1rem;
+}
+
+.risk-item {
+  background: rgba(33, 150, 243, 0.1);
+  padding: 1.25rem;
+  border-radius: 8px;
+}
+
+.risk-header {
+  color: #FFA726;
+  font-weight: 500;
+  font-size: 1.1rem;
+  margin-bottom: 0.75rem;
+  display: flex;
+  align-items: center;
+}
+
+.risk-description {
+  margin-bottom: 0.75rem;
+  line-height: 1.5;
+}
+
+.risk-mitigation {
+  color: #81C784;
+  display: flex;
+  align-items: center;
+  font-size: 0.9rem;
+}
+
+/* Recommendations Styles */
+.recommendations-list {
+  display: grid;
+  gap: 0.75rem;
+  margin-top: 1rem;
+}
+
+.recommendation-item {
+  background: rgba(33, 150, 243, 0.1);
+  padding: 1rem;
+  border-radius: 6px;
+  display: flex;
+  align-items: center;
+}
+
+/* Sticky Footer */
+.sticky-footer {
+  position: fixed;
+  bottom: 0;
+  width: calc(50% - 2rem);
+  background: linear-gradient(
+    to top,
+    rgba(30, 30, 30, 1) 0%,
+    rgba(30, 30, 30, 0.9) 70%,
+    rgba(30, 30, 30, 0) 100%
+  );
+  padding: 1rem 0;
+  margin-top: -4rem;
+  pointer-events: none;
+  z-index: 10;
+}
+
+.footer-content {
+  display: flex;
+  flex-direction: column;
+  align-items: center;
+  gap: 0.5rem;
+  pointer-events: auto;
+  padding: 0 2rem;
+}
+
+/* Responsive Design */
+@media (max-width: 1024px) {
+  .two-column-layout {
+    grid-template-columns: 1fr;
+  }
+  
+  .primary-content {
+    position: relative;
+    top: 0;
+    max-height: none;
+  }
+  
+  .sticky-footer {
+    position: fixed;
+    width: 100%;
+    left: 0;
+    right: 0;
+    margin-top: 0;
+  }
+  
+  .analysis-panel {
+    margin-top: 2rem;
+  }
+}
+
+/* Add these new styles */
+.editable-content {
+  position: relative;
+  background: rgba(0, 0, 0, 0.2);
+  border-radius: 8px;
+  padding: 1.5rem;
+  margin: 1rem 0;
+  transition: all 0.3s ease;
+}
+
+.edit-btn {
+  position: absolute;
+  top: 0.5rem;
+  right: 0.5rem;
+  opacity: 0;
+  transition: opacity 0.2s ease;
+}
+
+.editable-content:hover .edit-btn {
+  opacity: 1;
+}
+
+.edit-actions {
+  display: flex;
+  justify-content: flex-end;
+  gap: 0.5rem;
+  margin-top: 1rem;
+}
+
+.edit-textarea {
+  background: rgba(0, 0, 0, 0.2);
+  border-radius: 4px;
+}
+
+.footer-hint {
+  font-size: 0.8rem;
+  color: rgba(255, 255, 255, 0.6);
+  font-style: italic;
+}
+
+/* Style the textarea */
+:deep(.v-field__input) {
+  color: rgba(255, 255, 255, 0.87) !important;
+  font-family: inherit !important;
+  line-height: 1.6 !important;
+}
+
+:deep(.v-field) {
+  border-color: rgba(255, 255, 255, 0.1) !important;
+}
+
+.selected-details {
+  display: grid;
+  gap: 0.5rem;
+}
+
+.selected-detail {
+  display: flex;
+  justify-content: space-between;
+  align-items: center;
+  padding: 0.75rem 1rem;
+  background: rgba(33, 150, 243, 0.1);
+  border-radius: 6px;
+  transition: all 0.2s ease;
+}
+
+.selected-detail:hover {
+  background: rgba(33, 150, 243, 0.15);
+}
+
+.detail-content {
+  display: flex;
+  align-items: center;
+}
+
+.no-details {
+  color: rgba(255, 255, 255, 0.6);
+  font-style: italic;
+}
+
+.task-item {
+  cursor: pointer;
+  display: flex;
+  align-items: center;
+  transition: all 0.2s ease;
+}
+
+.task-item:hover {
+  background: rgba(33, 150, 243, 0.2);
+}
+
+.task-item.selected {
+  background: rgba(33, 150, 243, 0.3);
+}
+
+/* Checkbox styling */
+:deep(.v-checkbox) {
+  margin: 0;
+  padding: 0;
+}
+
+:deep(.v-checkbox .v-selection-control) {
+  margin: 0;
+  padding: 0;
+}
+
+.footer-buttons {
+  display: flex;
+  gap: 1rem;
+  align-items: center;
+}
+
+/* Add animation classes */
+.task-list-enter-active,
+.task-list-leave-active {
+  transition: all 0.3s ease;
+}
+
+.task-list-enter-from,
+.task-list-leave-to {
+  opacity: 0;
+  transform: translateX(30px);
+}
+</style> 
\ No newline at end of file
diff --git a/frontend/src/views/TestEstimateView.vue b/frontend/src/views/TestEstimateView.vue
new file mode 100644
index 0000000..4c7e9b6
--- /dev/null
+++ b/frontend/src/views/TestEstimateView.vue
@@ -0,0 +1,462 @@
+<template>
+  <div class="test-estimate">
+    <!-- Avatar style controls -->
+    <div class="avatar-controls">
+      <v-btn-group vertical density="compact">
+        <v-btn color="primary" size="small" @click="regenerateAvatars">Regenerate All</v-btn>
+        <v-btn color="primary" size="small" @click="cycleAvatarStyle">Change Style</v-btn>
+      </v-btn-group>
+      <div class="current-style text-secondary">Current Style: {{ currentAvatarStyle }}</div>
+    </div>
+    
+    <!-- Circle layout with centered average -->
+    <div class="estimation-circle" :style="circleStyles">
+      <div class="average-estimate">
+        <div class="average-number">{{ averageEstimate }}</div>
+        <div class="average-label">days average</div>
+      </div>
+      
+      <div 
+        v-for="(member, index) in mockTeamEstimates" 
+        :key="member.id"
+        class="team-member"
+        :style="getPositionStyle(index, mockTeamEstimates.length)"
+      >
+        <v-avatar
+          size="60"
+          class="member-avatar"
+          @click="showMemberDetails(member)"
+        >
+          <v-img :src="member.avatarUrl"></v-img>
+        </v-avatar>
+        <div class="member-info">
+          <div class="member-name">{{ member.name }}</div>
+          <div class="member-title">{{ member.title }}</div>
+          <div class="member-estimate">{{ member.estimate }} days</div>
+        </div>
+      </div>
+    </div>
+    
+    <!-- Add modal dialog -->
+    <v-dialog v-model="showDialog" max-width="400">
+      <v-card>
+        <v-card-title class="member-dialog-title">
+          <v-avatar size="48" class="mr-4">
+            <v-img :src="selectedMember?.avatarUrl"></v-img>
+          </v-avatar>
+          {{ selectedMember?.name }}
+        </v-card-title>
+        
+        <v-card-text>
+          <div class="member-dialog-role">{{ selectedMember?.title }}</div>
+          <div class="member-dialog-estimate">
+            <span class="estimate-label">Estimate:</span>
+            <span class="estimate-value">{{ selectedMember?.estimate }} days</span>
+          </div>
+          <div class="mt-4">
+            <div class="justification-label">Justification:</div>
+            <div class="justification-text">
+              {{ selectedMember?.justification || 'No justification provided.' }}
+            </div>
+          </div>
+        </v-card-text>
+        
+        <v-card-actions>
+          <v-spacer></v-spacer>
+          <v-btn color="primary" @click="showDialog = false">Close</v-btn>
+        </v-card-actions>
+      </v-card>
+    </v-dialog>
+    
+    <!-- Add back button -->
+    <div class="back-button-container">
+      <v-btn 
+        color="primary"
+        @click="router.push('/tech')"
+        class="text-uppercase"
+      >
+        Back to Tech Review
+      </v-btn>
+    </div>
+  </div>
+</template>
+
+<script setup lang="ts">
+import { ref, computed, onMounted } from 'vue'
+import { useRouter } from 'vue-router'
+
+const router = useRouter()
+
+// Avatar styles available in DiceBear
+const avatarStyles = [
+  'adventurer',
+  'adventurer-neutral',
+  'avataaars',
+  'avataaars-neutral',
+  'big-ears',
+  'big-ears-neutral',
+  'big-smile',
+  'bottts',
+  'bottts-neutral',
+  'croodles',
+  'croodles-neutral',
+  'fun-emoji',
+  'icons',
+  'identicon',
+  'initials',
+  'lorelei',
+  'lorelei-neutral',
+  'micah',
+  'miniavs',
+  'notionists',
+  'notionists-neutral',
+  'open-peeps',
+  'personas',
+  'pixel-art',
+  'pixel-art-neutral',
+  'shapes',
+  'thumbs'
+]
+
+const currentAvatarStyle = ref('adventurer')
+const currentStyleIndex = ref(0)
+
+// Mock team data
+interface TeamMember {
+  id: number
+  name: string
+  title: string
+  estimate: number
+  avatarUrl: string
+  justification?: string
+}
+
+const mockTeamEstimates = ref<TeamMember[]>([
+  {
+    id: 1,
+    name: 'Sarah Chen',
+    title: 'Senior Developer Lead',
+    estimate: 15,
+    avatarUrl: '',
+    justification: 'Need to account for integration testing and security review. Previous similar features took around 2 weeks.'
+  },
+  {
+    id: 2,
+    name: 'Jamie Lee',
+    title: 'Junior QA Analyst',
+    estimate: 7,
+    avatarUrl: '',
+    justification: 'Based on test coverage requirements and new test cases needed.'
+  },
+  {
+    id: 3,
+    name: 'Alex Thompson',
+    title: 'Senior Developer',
+    estimate: 9,
+    avatarUrl: '',
+    justification: 'Complex backend changes required. Need to refactor existing code.'
+  },
+  {
+    id: 4,
+    name: 'Michael Rodriguez',
+    title: 'Senior QA Analyst',
+    estimate: 5,
+    avatarUrl: '',
+    justification: 'Mostly regression testing needed, automation scripts can be reused.'
+  },
+  {
+    id: 5,
+    name: 'Emily Parker',
+    title: 'Mid-level Developer',
+    estimate: 7,
+    avatarUrl: '',
+    justification: 'Frontend changes are straightforward but need time for proper unit tests.'
+  },
+  {
+    id: 6,
+    name: 'David Kim',
+    title: 'UX Designer',
+    estimate: 6,
+    avatarUrl: '',
+    justification: 'Need to create and validate new interaction patterns with users.'
+  },
+  {
+    id: 7,
+    name: 'Lisa Wang',
+    title: 'Backend Developer',
+    estimate: 12,
+    avatarUrl: '',
+    justification: 'Database schema changes and API modifications required.'
+  },
+  {
+    id: 8,
+    name: 'Marcus Johnson',
+    title: 'DevOps Engineer',
+    estimate: 8,
+    avatarUrl: '',
+    justification: 'Need to update deployment pipeline and add new monitoring.'
+  }
+])
+
+// Initial random positions for animation
+const initialPositions = ref(new Map())
+
+const getRandomPosition = () => {
+  const randomX = (Math.random() - 0.5) * window.innerWidth
+  const randomY = (Math.random() - 0.5) * window.innerHeight
+  return { x: randomX, y: randomY }
+}
+
+// Initialize random positions when team changes
+const initializePositions = () => {
+  mockTeamEstimates.value.forEach(member => {
+    initialPositions.value.set(member.id, getRandomPosition())
+  })
+  // Trigger reflow to ensure animation works
+  setTimeout(() => {
+    initialPositions.value = new Map()
+  }, 50)
+}
+
+// Calculate average estimate
+const averageEstimate = computed(() => {
+  const total = mockTeamEstimates.value.reduce((sum, member) => sum + member.estimate, 0)
+  return (total / mockTeamEstimates.value.length).toFixed(1)
+})
+
+// Calculate circle size based on viewport
+const circleStyles = computed(() => {
+  const size = Math.min(window.innerWidth * 0.8, 800)
+  return {
+    width: `${size}px`,
+    height: `${size}px`
+  }
+})
+
+// Calculate position for each team member
+const getPositionStyle = (index: number, total: number) => {
+  const angle = (index * 360) / total - 90 // Start from top
+  const radius = 250 // Increased from 200 to 250 for better spacing
+  
+  // Get initial random position if it exists
+  const initialPos = initialPositions.value.get(mockTeamEstimates.value[index].id)
+  
+  if (initialPos) {
+    return {
+      position: 'absolute',
+      left: `${initialPos.x}px`,
+      top: `${initialPos.y}px`,
+      transform: 'translate(-50%, -50%)',
+      transition: 'none'
+    }
+  }
+  
+  const angleInRad = (angle * Math.PI) / 180
+  const x = Math.cos(angleInRad) * radius
+  const y = Math.sin(angleInRad) * radius
+  
+  return {
+    position: 'absolute',
+    left: '50%',
+    top: '50%',
+    transform: `translate(calc(-50% + ${x}px), calc(-50% + ${y}px))`,
+    transition: 'all 1s cubic-bezier(0.34, 1.56, 0.64, 1)'
+  }
+}
+
+// Generate new avatar URLs
+const regenerateAvatars = () => {
+  mockTeamEstimates.value.forEach(member => {
+    const seed = Math.random().toString(36).substring(7)
+    member.avatarUrl = `https://api.dicebear.com/7.x/${currentAvatarStyle.value}/svg?seed=${seed}`
+  })
+  initializePositions()
+}
+
+// Cycle through avatar styles
+const cycleAvatarStyle = () => {
+  currentStyleIndex.value = (currentStyleIndex.value + 1) % avatarStyles.length
+  currentAvatarStyle.value = avatarStyles[currentStyleIndex.value]
+  regenerateAvatars()
+}
+
+// Add these refs for dialog control
+const showDialog = ref(false)
+const selectedMember = ref<TeamMember | null>(null)
+
+// Update the showMemberDetails function
+const showMemberDetails = (member: TeamMember) => {
+  selectedMember.value = member
+  showDialog.value = true
+}
+
+// Initialize avatars on mount
+onMounted(() => {
+  regenerateAvatars()
+})
+</script>
+
+<style>
+.test-estimate {
+  max-width: 1000px;
+  margin: 0 auto;
+  padding: 0 20px;
+  position: relative;
+  display: flex;
+  flex-direction: column;
+}
+
+.avatar-controls {
+  position: fixed;
+  bottom: 1.5rem;
+  left: 1.5rem;
+  z-index: 1000;
+  scale: 0.9;
+}
+
+.current-style {
+  margin-top: 0.3rem;
+  font-size: 0.75rem;
+  opacity: 0.7;
+}
+
+.estimation-circle {
+  position: relative;
+  margin: -2rem auto 0;
+  padding-top: 2rem;
+}
+
+.average-estimate {
+  position: absolute;
+  top: 50%;
+  left: 50%;
+  transform: translate(-50%, -50%);
+  text-align: center;
+  background: rgba(33, 150, 243, 0.1);
+  padding: 1rem;
+  border-radius: 50%;
+  width: 120px;
+  height: 120px;
+  display: flex;
+  flex-direction: column;
+  justify-content: center;
+  align-items: center;
+}
+
+.average-number {
+  font-size: 2rem;
+  font-weight: bold;
+  color: #64B5F6;
+}
+
+.average-label {
+  font-size: 0.8rem;
+  opacity: 0.87;
+  color: rgba(255, 255, 255, 0.87);
+}
+
+.team-member {
+  position: absolute;
+  text-align: center;
+  transition: all 1s cubic-bezier(0.34, 1.56, 0.64, 1);
+  width: 120px;
+}
+
+.member-avatar {
+  margin-bottom: 0.5rem;
+  cursor: pointer;
+  transition: transform 0.2s;
+  background: white;
+  opacity: 0;
+  animation: fadeIn 0.5s forwards;
+  animation-delay: 0.5s;
+}
+
+.member-avatar:hover {
+  transform: scale(1.1);
+}
+
+.member-info {
+  font-size: 0.8rem;
+  white-space: nowrap;
+  color: rgba(255, 255, 255, 0.87);
+}
+
+.member-name {
+  font-weight: bold;
+  color: rgba(255, 255, 255, 0.87);
+}
+
+.member-title {
+  opacity: 0.7;
+  font-size: 0.7rem;
+  margin: 0.2rem 0;
+  color: rgba(255, 255, 255, 0.7);
+}
+
+.member-estimate {
+  color: #64B5F6;
+  font-weight: bold;
+}
+
+@keyframes fadeIn {
+  from { opacity: 0; }
+  to { opacity: 1; }
+}
+
+@media (max-width: 768px) {
+  .avatar-controls {
+    bottom: 1rem;
+    left: 1rem;
+  }
+  
+  .current-style {
+    font-size: 0.7rem;
+  }
+}
+
+.member-dialog-title {
+  display: flex;
+  align-items: center;
+  padding: 1rem;
+}
+
+.member-dialog-role {
+  color: var(--v-medium-emphasis-opacity);
+  font-size: 0.9rem;
+  margin-bottom: 1rem;
+}
+
+.member-dialog-estimate {
+  display: flex;
+  align-items: center;
+  gap: 0.5rem;
+  margin-top: 0.5rem;
+}
+
+.estimate-label {
+  font-weight: 500;
+}
+
+.estimate-value {
+  color: var(--v-theme-primary);
+  font-weight: bold;
+}
+
+.justification-label {
+  font-weight: 500;
+  margin-bottom: 0.5rem;
+}
+
+.justification-text {
+  line-height: 1.5;
+  color: var(--v-medium-emphasis-opacity);
+}
+
+.back-button-container {
+  position: fixed;
+  bottom: 2rem;
+  right: 2rem;
+  z-index: 10;
+}
+</style> 
\ No newline at end of file
diff --git a/frontend/src/views/TestFormatView.vue b/frontend/src/views/TestFormatView.vue
new file mode 100644
index 0000000..4159ec0
--- /dev/null
+++ b/frontend/src/views/TestFormatView.vue
@@ -0,0 +1,503 @@
+<template>
+  <div class="test">
+    <div class="two-column-layout">
+      <!-- Left Column: Primary Content -->
+      <div class="primary-content-wrapper">
+        <div class="primary-content">
+          <div class="story-section">
+            <h3>Improved Story</h3>
+            <div class="editable-content">
+              <template v-if="!editingStory">
+                <pre>{{ mockAnalysisResult.improved_story.text }}</pre>
+                <v-btn 
+                  size="small" 
+                  color="primary" 
+                  class="edit-btn"
+                  icon="mdi-pencil"
+                  @click="startEditingStory"
+                ></v-btn>
+              </template>
+              <template v-else>
+                <v-textarea
+                  v-model="editedStory"
+                  auto-grow
+                  variant="outlined"
+                  class="edit-textarea"
+                ></v-textarea>
+                <div class="edit-actions">
+                  <v-btn 
+                    size="small" 
+                    color="success" 
+                    @click="saveStory"
+                    class="mr-2"
+                  >Save</v-btn>
+                  <v-btn 
+                    size="small" 
+                    color="error" 
+                    @click="cancelEditStory"
+                  >Cancel</v-btn>
+                </div>
+              </template>
+            </div>
+            
+            <h3>Enhanced Acceptance Criteria</h3>
+            <div class="editable-content">
+              <template v-if="!editingAC">
+                <ul>
+                  <li v-for="(criterion, index) in mockAnalysisResult.improved_story.acceptance_criteria" 
+                      :key="index">
+                    {{ criterion }}
+                  </li>
+                </ul>
+                <v-btn 
+                  size="small" 
+                  color="primary" 
+                  class="edit-btn"
+                  icon="mdi-pencil"
+                  @click="startEditingAC"
+                ></v-btn>
+              </template>
+              <template v-else>
+                <v-textarea
+                  v-model="editedAC"
+                  auto-grow
+                  variant="outlined"
+                  placeholder="One acceptance criterion per line"
+                  class="edit-textarea"
+                ></v-textarea>
+                <div class="edit-actions">
+                  <v-btn 
+                    size="small" 
+                    color="success" 
+                    @click="saveAC"
+                    class="mr-2"
+                  >Save</v-btn>
+                  <v-btn 
+                    size="small" 
+                    color="error" 
+                    @click="cancelEditAC"
+                  >Cancel</v-btn>
+                </div>
+              </template>
+            </div>
+          </div>
+        </div>
+        
+        <!-- Sticky footer inside primary-content-wrapper -->
+        <div class="sticky-footer">
+          <div class="footer-content">
+            <v-btn 
+              color="primary" 
+              @click="router.push('/agile')"
+            >
+              Continue to Agile Review
+            </v-btn>
+            <div class="footer-hint" v-if="editingStory || editingAC">
+              Save your changes to enable sending for review
+            </div>
+          </div>
+        </div>
+      </div>
+
+      <!-- Right Column: Analysis Panel -->
+      <div class="analysis-panel">
+        <div class="analysis">
+          <h3>Analysis</h3>
+          <div class="invest-grid">
+            <div v-for="(item, index) in investAnalysis" :key="index" 
+                 class="invest-item"
+                 :class="{ 'warning': isNegative(item.content) }">
+              <div class="invest-header">
+                <span class="invest-letter">{{ item.letter }}</span>
+                <span class="invest-title">{{ item.title }}</span>
+              </div>
+              <div class="invest-content">{{ item.content }}</div>
+            </div>
+          </div>
+        </div>
+
+        <div class="suggestions mt-6">
+          <h3>Suggestions</h3>
+          <div class="suggestions-list">
+            <div v-for="(suggestion, key) in mockAnalysisResult.suggestions" 
+                 :key="key"
+                 class="suggestion-item">
+              <div class="suggestion-header">{{ key }}</div>
+              <div class="suggestion-content">{{ suggestion }}</div>
+            </div>
+          </div>
+        </div>
+      </div>
+    </div>
+  </div>
+</template>
+
+<script setup lang="ts">
+import { ref } from 'vue'
+import { mockAnalysisResult } from '@/mocks/mockAnalysisData'
+
+// Story editing
+const editingStory = ref(false)
+const editedStory = ref('')
+
+const startEditingStory = () => {
+  editedStory.value = mockAnalysisResult.improved_story.text
+  editingStory.value = true
+}
+
+const saveStory = () => {
+  mockAnalysisResult.improved_story.text = editedStory.value
+  editingStory.value = false
+}
+
+const cancelEditStory = () => {
+  editingStory.value = false
+}
+
+// Acceptance Criteria editing
+const editingAC = ref(false)
+const editedAC = ref('')
+
+const startEditingAC = () => {
+  editedAC.value = mockAnalysisResult.improved_story.acceptance_criteria.join('\n')
+  editingAC.value = true
+}
+
+const saveAC = () => {
+  mockAnalysisResult.improved_story.acceptance_criteria = editedAC.value
+    .split('\n')
+    .filter(line => line.trim()) // Remove empty lines
+  editingAC.value = false
+}
+
+const cancelEditAC = () => {
+  editingAC.value = false
+}
+
+// Parse INVEST analysis into structured data
+const investAnalysis = [
+  {
+    letter: 'I',
+    title: 'Independent',
+    content: 'The user story is independent, as it does not seem to depend on any other user story for its implementation.'
+  },
+  {
+    letter: 'N',
+    title: 'Negotiable',
+    content: 'The story is not very negotiable as it is not clear on what exactly the notification bell should do, or what exactly broadcasting a message entails.'
+  },
+  {
+    letter: 'V',
+    title: 'Valuable',
+    content: 'The value to the user is not clearly stated. Why should the user care about this new notification bell?'
+  },
+  {
+    letter: 'E',
+    title: 'Estimable',
+    content: 'The story is too vague to be reliably estimated. We don\'t know what "broadcasting a message" involves.'
+  },
+  {
+    letter: 'S',
+    title: 'Small',
+    content: 'The story is not small, as it seems to involve several different features or functionalities.'
+  },
+  {
+    letter: 'T',
+    title: 'Testable',
+    content: 'The acceptance criteria are too vague to be testable. What does it mean for everyone to "get it" and "read it"?'
+  }
+]
+
+// Add this function to detect negative feedback
+const isNegative = (content: string): boolean => {
+  const negativeTerms = ['not', 'too vague', 'unclear', 'missing'];
+  return negativeTerms.some(term => content.toLowerCase().includes(term));
+}
+</script>
+
+<style>
+.two-column-layout {
+  display: grid;
+  grid-template-columns: 1fr 1fr;
+  gap: 2rem;
+  padding: 2rem;
+  max-width: 1800px;
+  margin: 0 auto;
+  min-height: 100vh;
+  position: relative;
+}
+
+.primary-content-wrapper {
+  position: relative;
+  height: 100%;
+  display: flex;
+  flex-direction: column;
+}
+
+.primary-content {
+  position: sticky;
+  top: 2rem;
+  background: rgba(255, 255, 255, 0.05);
+  border-radius: 12px;
+  padding: 2rem;
+  max-height: calc(100vh - 8rem);
+  overflow-y: auto;
+  flex-grow: 1;
+}
+
+.analysis-panel {
+  background: rgba(255, 255, 255, 0.05);
+  border-radius: 12px;
+  padding: 2rem;
+}
+
+.editable-content {
+  position: relative;
+  background: rgba(0, 0, 0, 0.2);
+  border-radius: 8px;
+  padding: 1.5rem;
+  margin: 1rem 0;
+  transition: all 0.3s ease;
+}
+
+.edit-btn {
+  position: absolute;
+  top: 0.5rem;
+  right: 0.5rem;
+  opacity: 0;
+  transition: opacity 0.2s ease;
+}
+
+.editable-content:hover .edit-btn {
+  opacity: 1;
+}
+
+.story-section h3 {
+  color: #64B5F6;
+  margin-top: 2rem;
+}
+
+.story-section h3:first-child {
+  margin-top: 0;
+}
+
+.editable-content pre {
+  white-space: pre-wrap;
+  word-wrap: break-word;
+  color: rgba(255, 255, 255, 0.87);
+  font-family: inherit;
+  margin: 0;
+  line-height: 1.6;
+}
+
+.editable-content ul {
+  list-style-type: none;
+  padding-left: 0;
+  margin: 0;
+}
+
+.editable-content li {
+  color: rgba(255, 255, 255, 0.87);
+  margin-bottom: 0.5rem;
+  padding-left: 1.5rem;
+  position: relative;
+}
+
+.editable-content li:before {
+  content: "â€¢";
+  color: #64B5F6;
+  position: absolute;
+  left: 0;
+}
+
+/* Keep existing invest-grid styles */
+.invest-grid {
+  display: grid;
+  grid-template-columns: 1fr;
+  gap: 1rem;
+  margin-top: 1rem;
+}
+
+/* Responsive Design */
+@media (max-width: 1024px) {
+  .two-column-layout {
+    grid-template-columns: 1fr;
+  }
+  
+  .primary-content {
+    position: relative;
+    top: 0;
+    max-height: none;
+  }
+  
+  .analysis-panel {
+    margin-top: 2rem;
+  }
+}
+
+/* Updated Analysis Panel Styles */
+.analysis-panel {
+  background: rgba(255, 255, 255, 0.05);
+  border-radius: 12px;
+  padding: 2rem;
+}
+
+.analysis-panel h3 {
+  color: #64B5F6;
+  font-size: 1.2rem;
+  margin-bottom: 1.5rem;
+  font-weight: 500;
+}
+
+/* INVEST Grid Refinements */
+.invest-grid {
+  display: grid;
+  grid-template-columns: 1fr;
+  gap: 1rem;
+}
+
+.invest-item {
+  background: rgba(33, 150, 243, 0.1);
+  border-radius: 8px;
+  padding: 1.25rem;
+  border-left: 3px solid #64B5F6;
+  transition: transform 0.2s ease;
+}
+
+.invest-item.warning {
+  border-left-color: #FFA726;
+  background: rgba(255, 167, 38, 0.1);
+}
+
+.invest-header {
+  display: flex;
+  align-items: center;
+  margin-bottom: 0.75rem;
+}
+
+.invest-letter {
+  background: #64B5F6;
+  color: #1E1E1E;
+  width: 28px;
+  height: 28px;
+  border-radius: 50%;
+  display: flex;
+  align-items: center;
+  justify-content: center;
+  font-weight: bold;
+  margin-right: 0.75rem;
+}
+
+.warning .invest-letter {
+  background: #FFA726;
+}
+
+/* Suggestions Refinements */
+.suggestions-list {
+  display: grid;
+  gap: 1rem;
+}
+
+.suggestion-item {
+  background: rgba(33, 150, 243, 0.1);
+  border-radius: 8px;
+  padding: 1.25rem;
+  border-left: 3px solid #64B5F6;
+}
+
+.suggestion-header {
+  color: #64B5F6;
+  font-weight: 500;
+  margin-bottom: 0.5rem;
+  font-size: 1.1rem;
+}
+
+.suggestion-content {
+  color: rgba(255, 255, 255, 0.87);
+  line-height: 1.6;
+}
+
+/* Hover effects */
+.invest-item:hover, 
+.suggestion-item:hover {
+  transform: translateY(-2px);
+}
+
+/* Responsive adjustments */
+@media (max-width: 1400px) {
+  .invest-grid {
+    grid-template-columns: 1fr;
+  }
+}
+
+.edit-textarea {
+  background: rgba(0, 0, 0, 0.2);
+  border-radius: 4px;
+}
+
+.edit-actions {
+  display: flex;
+  justify-content: flex-end;
+  gap: 0.5rem;
+  margin-top: 1rem;
+}
+
+/* Style the textarea */
+:deep(.v-field__input) {
+  color: rgba(255, 255, 255, 0.87) !important;
+  font-family: inherit !important;
+  line-height: 1.6 !important;
+}
+
+:deep(.v-field) {
+  border-color: rgba(255, 255, 255, 0.1) !important;
+}
+
+.sticky-footer {
+  position: fixed;
+  bottom: 0;
+  width: calc(50% - 2rem);
+  background: linear-gradient(
+    to top,
+    rgba(30, 30, 30, 1) 0%,
+    rgba(30, 30, 30, 0.9) 70%,
+    rgba(30, 30, 30, 0) 100%
+  );
+  padding: 1rem 0;
+  margin-top: -4rem;
+  pointer-events: none;
+  z-index: 10;
+}
+
+.footer-content {
+  display: flex;
+  flex-direction: column;
+  align-items: center;
+  gap: 0.5rem;
+  pointer-events: auto;
+  padding: 0 2rem;
+}
+
+.footer-hint {
+  font-size: 0.8rem;
+  color: rgba(255, 255, 255, 0.6);
+  font-style: italic;
+}
+
+/* Update responsive styles */
+@media (max-width: 1024px) {
+  .primary-content {
+    position: relative;
+    top: 0;
+    max-height: none;
+  }
+  
+  .sticky-footer {
+    position: fixed;
+    width: 100%;
+    left: 0;
+    right: 0;
+    margin-top: 0;
+  }
+}
+</style> 
\ No newline at end of file
diff --git a/frontend/src/views/TestTechReviewView.vue b/frontend/src/views/TestTechReviewView.vue
new file mode 100644
index 0000000..a30e1dc
--- /dev/null
+++ b/frontend/src/views/TestTechReviewView.vue
@@ -0,0 +1,735 @@
+<template>
+  <div class="test">
+    <div class="two-column-layout">
+      <!-- Left Column -->
+      <div class="primary-content-wrapper">
+        <div class="primary-content">
+          <!-- Add Story and AC sections -->
+          <div class="story-section">
+            <h3>Technical Review Modifications</h3>
+            
+            <!-- Story Section -->
+            <h4 class="mt-4">User Story</h4>
+            <div class="editable-content">
+              <template v-if="!editingStory">
+                <pre>{{ mockTechReviewResult.improved_story.text }}</pre>
+                <v-btn 
+                  size="small" 
+                  color="primary" 
+                  class="edit-btn"
+                  icon="mdi-pencil"
+                  @click="startEditingStory"
+                ></v-btn>
+              </template>
+              <template v-else>
+                <v-textarea
+                  v-model="editedStory"
+                  auto-grow
+                  variant="outlined"
+                  class="edit-textarea"
+                ></v-textarea>
+                <div class="edit-actions">
+                  <v-btn 
+                    size="small" 
+                    color="success" 
+                    @click="saveStory"
+                    class="mr-2"
+                  >Save</v-btn>
+                  <v-btn 
+                    size="small" 
+                    color="error" 
+                    @click="cancelEditStory"
+                  >Cancel</v-btn>
+                </div>
+              </template>
+            </div>
+            
+            <!-- AC Section -->
+            <h4 class="mt-4">Acceptance Criteria</h4>
+            <div class="editable-content">
+              <template v-if="!editingAC">
+                <ul>
+                  <li v-for="(criterion, index) in mockTechReviewResult.improved_story.acceptance_criteria" 
+                      :key="index">
+                    {{ criterion }}
+                  </li>
+                </ul>
+                <v-btn 
+                  size="small" 
+                  color="primary" 
+                  class="edit-btn"
+                  icon="mdi-pencil"
+                  @click="startEditingAC"
+                ></v-btn>
+              </template>
+              <template v-else>
+                <v-textarea
+                  v-model="editedAC"
+                  auto-grow
+                  variant="outlined"
+                  placeholder="One acceptance criterion per line"
+                  class="edit-textarea"
+                ></v-textarea>
+                <div class="edit-actions">
+                  <v-btn 
+                    size="small" 
+                    color="success" 
+                    @click="saveAC"
+                    class="mr-2"
+                  >Save</v-btn>
+                  <v-btn 
+                    size="small" 
+                    color="error" 
+                    @click="cancelEditAC"
+                  >Cancel</v-btn>
+                </div>
+              </template>
+            </div>
+
+            <!-- After AC section and before Implementation Details -->
+            <h4 class="mt-4">Selected Implementation Details</h4>
+            <div class="editable-content">
+              <div v-if="selectedDetails.length === 0" class="no-details">
+                No implementation details added yet. Select from the sections below.
+              </div>
+              <div v-else class="selected-details">
+                <div v-for="(detail, index) in selectedDetails" 
+                     :key="index"
+                     class="selected-detail">
+                  <div class="detail-content">
+                    <v-icon size="small" :color="getDetailColor(detail.type)" class="mr-2">
+                      {{ getDetailIcon(detail.type) }}
+                    </v-icon>
+                    {{ detail.text }}
+                  </div>
+                  <v-btn 
+                    size="x-small" 
+                    color="error" 
+                    variant="text"
+                    icon="mdi-close"
+                    @click="removeDetail(index)"
+                  ></v-btn>
+                </div>
+              </div>
+            </div>
+
+            <!-- Implementation Details Section -->
+            <h3 class="mt-6">Implementation Details</h3>
+            <div class="tech-section">
+              <h4>Frontend</h4>
+              <div class="task-list">
+                <div v-for="(task, index) in availableDetails.frontend" 
+                     :key="'fe-'+index"
+                     class="task-item"
+                     @click="toggleDetail('frontend', task)">
+                  <v-icon size="small" color="primary" class="mr-2">mdi-code-tags</v-icon>
+                  {{ task }}
+                </div>
+              </div>
+
+              <h4>Backend</h4>
+              <div class="task-list">
+                <div v-for="(task, index) in availableDetails.backend" 
+                     :key="'be-'+index"
+                     class="task-item"
+                     @click="toggleDetail('backend', task)">
+                  <v-icon size="small" color="success" class="mr-2">mdi-server</v-icon>
+                  {{ task }}
+                </div>
+              </div>
+
+              <h4>Database</h4>
+              <div class="task-list">
+                <div v-for="(task, index) in availableDetails.database" 
+                     :key="'db-'+index"
+                     class="task-item"
+                     @click="toggleDetail('database', task)">
+                  <v-icon size="small" color="warning" class="mr-2">mdi-database</v-icon>
+                  {{ task }}
+                </div>
+              </div>
+            </div>
+
+            <h3 class="mt-6">Tech Lead Estimate</h3>
+            <div class="effort-grid">
+              <div v-for="(effort, key) in mockTechReviewResult.estimated_effort" 
+                   :key="key"
+                   class="effort-item"
+                   :class="{ 'effort-total': key === 'total' }">
+                <div class="effort-label">{{ key }}</div>
+                <div class="effort-value">{{ effort }}</div>
+              </div>
+            </div>
+          </div>
+        </div>
+
+        <!-- Sticky footer -->
+        <div class="sticky-footer">
+          <div class="footer-content">
+            <div class="footer-buttons">
+              <v-btn 
+                color="success" 
+                prepend-icon="mdi-check-circle"
+                class="mr-4"
+                :disabled="editingStory || editingAC"
+              >
+                Accept Tech Review
+              </v-btn>
+              <v-btn 
+                color="primary" 
+                prepend-icon="mdi-account-group"
+                :disabled="editingStory || editingAC"
+              >
+                Get Team Estimate
+              </v-btn>
+            </div>
+            <div class="footer-hint" v-if="editingStory || editingAC">
+              Save your changes to enable actions
+            </div>
+          </div>
+        </div>
+      </div>
+
+      <!-- Right Column: Analysis -->
+      <div class="analysis-panel">
+        <div class="technical-analysis">
+          <h3>Technical Analysis</h3>
+          <div class="analysis-grid">
+            <div v-for="(analysis, key) in mockTechReviewResult.technical_analysis" 
+                 :key="key"
+                 class="analysis-item">
+              <div class="analysis-header">
+                <span class="analysis-title">{{ key }}</span>
+                <div class="score-badge" :class="getScoreClass(analysis.score)">
+                  {{ analysis.score }}/10
+                </div>
+              </div>
+              <div class="analysis-content">{{ analysis.explanation }}</div>
+            </div>
+          </div>
+        </div>
+
+        <div class="risks mt-6">
+          <h3>Risks & Considerations</h3>
+          <div class="risks-grid">
+            <div v-for="(risk, index) in mockTechReviewResult.risks_and_considerations" 
+                 :key="index"
+                 class="risk-item">
+              <div class="risk-header">
+                <v-icon color="warning" class="mr-2">mdi-alert</v-icon>
+                {{ risk.category }}
+              </div>
+              <div class="risk-description">{{ risk.description }}</div>
+              <div class="risk-mitigation">
+                <v-icon color="success" size="small" class="mr-2">mdi-shield</v-icon>
+                {{ risk.mitigation }}
+              </div>
+            </div>
+          </div>
+        </div>
+
+        <div class="recommendations mt-6">
+          <h3>Recommendations</h3>
+          <div class="recommendations-list">
+            <div v-for="(rec, index) in mockTechReviewResult.recommendations" 
+                 :key="index"
+                 class="recommendation-item">
+              <v-icon color="info" size="small" class="mr-2">mdi-lightbulb</v-icon>
+              {{ rec }}
+            </div>
+          </div>
+        </div>
+      </div>
+    </div>
+  </div>
+</template>
+
+<script setup lang="ts">
+import { ref } from 'vue'
+import { mockTechReviewResult } from '@/mocks/mockTechReviewData'
+
+// Story editing
+const editingStory = ref(false)
+const editedStory = ref('')
+
+const startEditingStory = () => {
+  editedStory.value = mockTechReviewResult.improved_story.text
+  editingStory.value = true
+}
+
+const saveStory = () => {
+  mockTechReviewResult.improved_story.text = editedStory.value
+  editingStory.value = false
+}
+
+const cancelEditStory = () => {
+  editingStory.value = false
+}
+
+// Acceptance Criteria editing
+const editingAC = ref(false)
+const editedAC = ref('')
+
+const startEditingAC = () => {
+  editedAC.value = mockTechReviewResult.improved_story.acceptance_criteria.join('\n')
+  editingAC.value = true
+}
+
+const saveAC = () => {
+  mockTechReviewResult.improved_story.acceptance_criteria = editedAC.value
+    .split('\n')
+    .filter(line => line.trim())
+  editingAC.value = false
+}
+
+const cancelEditAC = () => {
+  editingAC.value = false
+}
+
+// Keep existing getScoreClass function
+const getScoreClass = (score: number): string => {
+  if (score >= 8) return 'score-high'
+  if (score >= 5) return 'score-medium'
+  return 'score-low'
+}
+
+interface ImplementationDetail {
+  type: 'frontend' | 'backend' | 'database'
+  text: string
+}
+
+// Store original details and selected details
+const originalDetails = ref({
+  frontend: [...mockTechReviewResult.implementation_details.frontend],
+  backend: [...mockTechReviewResult.implementation_details.backend],
+  database: [...mockTechReviewResult.implementation_details.database]
+})
+
+const availableDetails = ref({
+  frontend: [...mockTechReviewResult.implementation_details.frontend],
+  backend: [...mockTechReviewResult.implementation_details.backend],
+  database: [...mockTechReviewResult.implementation_details.database]
+})
+
+const selectedDetails = ref<ImplementationDetail[]>([])
+
+const toggleDetail = (type: 'frontend' | 'backend' | 'database', text: string) => {
+  // Remove from available list and add to selected
+  const typeList = availableDetails.value[type]
+  const index = typeList.indexOf(text)
+  if (index >= 0) {
+    typeList.splice(index, 1)
+    selectedDetails.value.push({ type, text })
+  }
+}
+
+const removeDetail = (index: number) => {
+  const detail = selectedDetails.value[index]
+  // Add back to original section
+  availableDetails.value[detail.type].push(detail.text)
+  // Sort to maintain original order
+  availableDetails.value[detail.type].sort((a, b) => {
+    return originalDetails.value[detail.type].indexOf(a) - 
+           originalDetails.value[detail.type].indexOf(b)
+  })
+  // Remove from selected
+  selectedDetails.value.splice(index, 1)
+}
+
+const getDetailIcon = (type: string): string => {
+  switch (type) {
+    case 'frontend': return 'mdi-code-tags'
+    case 'backend': return 'mdi-server'
+    case 'database': return 'mdi-database'
+    default: return 'mdi-code-tags'
+  }
+}
+
+const getDetailColor = (type: string): string => {
+  switch (type) {
+    case 'frontend': return 'primary'
+    case 'backend': return 'success'
+    case 'database': return 'warning'
+    default: return 'primary'
+  }
+}
+</script>
+
+<style>
+/* Base layout styles (similar to TestFormatView) */
+.two-column-layout {
+  display: grid;
+  grid-template-columns: 1fr 1fr;
+  gap: 2rem;
+  padding: 2rem;
+  max-width: 1800px;
+  margin: 0 auto;
+  min-height: 100vh;
+  position: relative;
+}
+
+.primary-content-wrapper {
+  position: relative;
+  height: 100%;
+  display: flex;
+  flex-direction: column;
+}
+
+.primary-content {
+  position: sticky;
+  top: 2rem;
+  background: rgba(255, 255, 255, 0.05);
+  border-radius: 12px;
+  padding: 2rem;
+  max-height: calc(100vh - 8rem);
+  overflow-y: auto;
+  flex-grow: 1;
+}
+
+/* Implementation Details Styles */
+.tech-section {
+  margin-top: 1rem;
+}
+
+.tech-section h4 {
+  color: #64B5F6;
+  margin: 1.5rem 0 1rem;
+  font-size: 1.1rem;
+}
+
+.task-list {
+  display: grid;
+  gap: 0.75rem;
+}
+
+.task-item {
+  cursor: pointer;
+  display: flex;
+  align-items: center;
+  transition: all 0.2s ease;
+  padding: 0.75rem 1rem;
+  border-radius: 6px;
+  background: rgba(33, 150, 243, 0.1);
+}
+
+.task-item:hover {
+  background: rgba(33, 150, 243, 0.2);
+  transform: translateY(-1px);
+}
+
+/* Effort Grid */
+.effort-grid {
+  display: grid;
+  grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
+  gap: 1rem;
+  margin-top: 1rem;
+  background: rgba(255, 255, 255, 0.05);
+  padding: 1rem;
+  border-radius: 8px;
+  border-left: 3px solid #4CAF50;
+}
+
+.effort-item {
+  background: rgba(33, 150, 243, 0.1);
+  padding: 1rem;
+  border-radius: 8px;
+  text-align: center;
+}
+
+.effort-total {
+  background: rgba(33, 150, 243, 0.2);
+  font-weight: bold;
+}
+
+.effort-label {
+  color: #64B5F6;
+  font-size: 0.9rem;
+  text-transform: uppercase;
+  margin-bottom: 0.5rem;
+}
+
+.effort-value {
+  font-size: 1.2rem;
+  font-weight: 500;
+  color: rgba(255, 255, 255, 0.87);
+}
+
+/* Analysis Panel Styles */
+.analysis-panel {
+  background: rgba(255, 255, 255, 0.05);
+  border-radius: 12px;
+  padding: 2rem;
+}
+
+.analysis-grid {
+  display: grid;
+  gap: 1rem;
+  margin-top: 1rem;
+}
+
+.analysis-item {
+  background: rgba(33, 150, 243, 0.1);
+  padding: 1.25rem;
+  border-radius: 8px;
+}
+
+.analysis-header {
+  display: flex;
+  justify-content: space-between;
+  align-items: center;
+  margin-bottom: 0.75rem;
+}
+
+.analysis-title {
+  color: #64B5F6;
+  font-weight: 500;
+  font-size: 1.1rem;
+  text-transform: capitalize;
+}
+
+.score-badge {
+  padding: 0.25rem 0.75rem;
+  border-radius: 12px;
+  font-weight: 500;
+  font-size: 0.9rem;
+}
+
+.score-high {
+  background: rgba(76, 175, 80, 0.2);
+  color: #81C784;
+}
+
+.score-medium {
+  background: rgba(255, 152, 0, 0.2);
+  color: #FFB74D;
+}
+
+.score-low {
+  background: rgba(244, 67, 54, 0.2);
+  color: #E57373;
+}
+
+/* Risks Styles */
+.risks-grid {
+  display: grid;
+  gap: 1rem;
+  margin-top: 1rem;
+}
+
+.risk-item {
+  background: rgba(33, 150, 243, 0.1);
+  padding: 1.25rem;
+  border-radius: 8px;
+}
+
+.risk-header {
+  color: #FFA726;
+  font-weight: 500;
+  font-size: 1.1rem;
+  margin-bottom: 0.75rem;
+  display: flex;
+  align-items: center;
+}
+
+.risk-description {
+  margin-bottom: 0.75rem;
+  line-height: 1.5;
+}
+
+.risk-mitigation {
+  color: #81C784;
+  display: flex;
+  align-items: center;
+  font-size: 0.9rem;
+}
+
+/* Recommendations Styles */
+.recommendations-list {
+  display: grid;
+  gap: 0.75rem;
+  margin-top: 1rem;
+}
+
+.recommendation-item {
+  background: rgba(33, 150, 243, 0.1);
+  padding: 1rem;
+  border-radius: 6px;
+  display: flex;
+  align-items: center;
+}
+
+/* Sticky Footer */
+.sticky-footer {
+  position: fixed;
+  bottom: 0;
+  width: calc(50% - 2rem);
+  background: linear-gradient(
+    to top,
+    rgba(30, 30, 30, 1) 0%,
+    rgba(30, 30, 30, 0.9) 70%,
+    rgba(30, 30, 30, 0) 100%
+  );
+  padding: 1rem 0;
+  margin-top: -4rem;
+  pointer-events: none;
+  z-index: 10;
+}
+
+.footer-content {
+  display: flex;
+  flex-direction: column;
+  align-items: center;
+  gap: 0.5rem;
+  pointer-events: auto;
+  padding: 0 2rem;
+}
+
+/* Responsive Design */
+@media (max-width: 1024px) {
+  .two-column-layout {
+    grid-template-columns: 1fr;
+  }
+  
+  .primary-content {
+    position: relative;
+    top: 0;
+    max-height: none;
+  }
+  
+  .sticky-footer {
+    position: fixed;
+    width: 100%;
+    left: 0;
+    right: 0;
+    margin-top: 0;
+  }
+  
+  .analysis-panel {
+    margin-top: 2rem;
+  }
+}
+
+/* Add these new styles */
+.editable-content {
+  position: relative;
+  background: rgba(0, 0, 0, 0.2);
+  border-radius: 8px;
+  padding: 1.5rem;
+  margin: 1rem 0;
+  transition: all 0.3s ease;
+}
+
+.edit-btn {
+  position: absolute;
+  top: 0.5rem;
+  right: 0.5rem;
+  opacity: 0;
+  transition: opacity 0.2s ease;
+}
+
+.editable-content:hover .edit-btn {
+  opacity: 1;
+}
+
+.edit-actions {
+  display: flex;
+  justify-content: flex-end;
+  gap: 0.5rem;
+  margin-top: 1rem;
+}
+
+.edit-textarea {
+  background: rgba(0, 0, 0, 0.2);
+  border-radius: 4px;
+}
+
+.footer-hint {
+  font-size: 0.8rem;
+  color: rgba(255, 255, 255, 0.6);
+  font-style: italic;
+}
+
+/* Style the textarea */
+:deep(.v-field__input) {
+  color: rgba(255, 255, 255, 0.87) !important;
+  font-family: inherit !important;
+  line-height: 1.6 !important;
+}
+
+:deep(.v-field) {
+  border-color: rgba(255, 255, 255, 0.1) !important;
+}
+
+.selected-details {
+  display: grid;
+  gap: 0.5rem;
+}
+
+.selected-detail {
+  display: flex;
+  justify-content: space-between;
+  align-items: center;
+  padding: 0.75rem 1rem;
+  background: rgba(33, 150, 243, 0.1);
+  border-radius: 6px;
+  transition: all 0.2s ease;
+}
+
+.selected-detail:hover {
+  background: rgba(33, 150, 243, 0.15);
+}
+
+.detail-content {
+  display: flex;
+  align-items: center;
+}
+
+.no-details {
+  color: rgba(255, 255, 255, 0.6);
+  font-style: italic;
+}
+
+.task-item {
+  cursor: pointer;
+  display: flex;
+  align-items: center;
+  transition: all 0.2s ease;
+}
+
+.task-item:hover {
+  background: rgba(33, 150, 243, 0.2);
+}
+
+.task-item.selected {
+  background: rgba(33, 150, 243, 0.3);
+}
+
+/* Checkbox styling */
+:deep(.v-checkbox) {
+  margin: 0;
+  padding: 0;
+}
+
+:deep(.v-checkbox .v-selection-control) {
+  margin: 0;
+  padding: 0;
+}
+
+.footer-buttons {
+  display: flex;
+  gap: 1rem;
+  align-items: center;
+}
+
+/* Add animation classes */
+.task-list-enter-active,
+.task-list-leave-active {
+  transition: all 0.3s ease;
+}
+
+.task-list-enter-from,
+.task-list-leave-to {
+  opacity: 0;
+  transform: translateX(30px);
+}
+</style> 
\ No newline at end of file
diff --git a/frontend/src/views/TestView.vue b/frontend/src/views/TestView.vue
new file mode 100644
index 0000000..e5a3efa
--- /dev/null
+++ b/frontend/src/views/TestView.vue
@@ -0,0 +1,308 @@
+<template>
+  <div class="test">
+    <div class="two-column-layout">
+      <!-- Left Column: Story Input -->
+      <div class="primary-content-wrapper">
+        <div class="primary-content">
+          <h2>Story Input</h2>
+          
+          <div class="input-section">
+            <h3>User Story</h3>
+            <v-textarea
+              v-model="userStory"
+              auto-grow
+              variant="outlined"
+              placeholder="As a [user type], I want to [action], so that [benefit]"
+              class="story-input"
+              :rules="[v => !!v || 'Story is required']"
+            ></v-textarea>
+          </div>
+
+          <div class="input-section mt-6">
+            <h3>Acceptance Criteria</h3>
+            <v-textarea
+              v-model="acceptanceCriteria"
+              auto-grow
+              variant="outlined"
+              placeholder="Enter each acceptance criterion on a new line"
+              class="ac-input"
+              :rules="[v => !!v || 'At least one acceptance criterion is required']"
+            ></v-textarea>
+          </div>
+
+          <div class="input-section mt-6">
+            <h3>Context</h3>
+            <div class="input-hint">Provide any background information or business context that helps understand this story</div>
+            <v-textarea
+              v-model="context"
+              auto-grow
+              variant="outlined"
+              placeholder="Example: This story is part of the new notification system. Currently, users have no way to see broadcast messages..."
+              class="context-input"
+              rows="3"
+            ></v-textarea>
+          </div>
+        </div>
+
+        <!-- Sticky Footer -->
+        <div class="sticky-footer">
+          <div class="footer-content">
+            <div class="footer-buttons">
+              <v-btn 
+                color="primary" 
+                size="large"
+                prepend-icon="mdi-magic-staff"
+                :loading="loading"
+                :disabled="!isValid"
+                @click="submitStory"
+              >
+                Improve Story
+              </v-btn>
+            </div>
+            <div class="footer-hint" v-if="!isValid">
+              Please enter both a user story and acceptance criteria
+            </div>
+          </div>
+        </div>
+      </div>
+
+      <!-- Right Column: Guidelines -->
+      <div class="guidelines-panel">
+        <div class="guidelines-section">
+          <h3>Story Writing Guidelines</h3>
+          <div class="guideline-card">
+            <div class="guideline-header">
+              <v-icon color="primary" class="mr-2">mdi-format-quote-open</v-icon>
+              User Story Format
+            </div>
+            <div class="guideline-content">
+              <p><strong>As a</strong> [type of user]</p>
+              <p><strong>I want to</strong> [perform some action]</p>
+              <p><strong>So that</strong> [achieve some benefit]</p>
+            </div>
+          </div>
+
+          <div class="guideline-card mt-4">
+            <div class="guideline-header">
+              <v-icon color="success" class="mr-2">mdi-checkbox-marked-circle</v-icon>
+              INVEST Principles
+            </div>
+            <div class="guideline-content">
+              <ul class="invest-list">
+                <li><strong>Independent:</strong> Minimal dependencies on other stories</li>
+                <li><strong>Negotiable:</strong> Flexible in implementation details</li>
+                <li><strong>Valuable:</strong> Delivers clear value to users</li>
+                <li><strong>Estimable:</strong> Can be sized relatively easily</li>
+                <li><strong>Small:</strong> Completable within one sprint</li>
+                <li><strong>Testable:</strong> Clear criteria for completion</li>
+              </ul>
+            </div>
+          </div>
+
+          <div class="guideline-card mt-4">
+            <div class="guideline-header">
+              <v-icon color="warning" class="mr-2">mdi-lightbulb</v-icon>
+              Acceptance Criteria Tips
+            </div>
+            <div class="guideline-content">
+              <ul>
+                <li>Use clear, specific language</li>
+                <li>One criterion per line</li>
+                <li>Include all success conditions</li>
+                <li>Consider edge cases</li>
+                <li>Make them testable</li>
+              </ul>
+            </div>
+          </div>
+        </div>
+      </div>
+    </div>
+  </div>
+</template>
+
+<script setup lang="ts">
+import { ref, computed } from 'vue'
+
+const context = ref('')
+const userStory = ref('')
+const acceptanceCriteria = ref('')
+const loading = ref(false)
+
+const isValid = computed(() => {
+  return userStory.value.trim() && acceptanceCriteria.value.trim()
+})
+
+const submitStory = async () => {
+  if (!isValid.value) return
+  
+  loading.value = true
+  try {
+    // Your existing submission logic
+    // Now includes context: context.value
+  } finally {
+    loading.value = false
+  }
+}
+</script>
+
+<style>
+.two-column-layout {
+  display: grid;
+  grid-template-columns: 1fr 1fr;
+  gap: 2rem;
+  padding: 2rem;
+  max-width: 1800px;
+  margin: 0 auto;
+  min-height: 100vh;
+  position: relative;
+}
+
+.primary-content-wrapper {
+  position: relative;
+  height: 100%;
+  display: flex;
+  flex-direction: column;
+}
+
+.primary-content {
+  position: sticky;
+  top: 2rem;
+  background: rgba(255, 255, 255, 0.05);
+  border-radius: 12px;
+  padding: 2rem;
+  max-height: calc(100vh - 8rem);
+  overflow-y: auto;
+  flex-grow: 1;
+}
+
+.input-section {
+  margin-top: 2.5rem;
+}
+
+.input-section:first-child {
+  margin-top: 1.5rem;
+}
+
+.story-input,
+.ac-input {
+  margin-top: 1rem;
+  background: rgba(0, 0, 0, 0.2);
+  border-radius: 8px;
+}
+
+/* Guidelines Panel */
+.guidelines-panel {
+  background: rgba(255, 255, 255, 0.05);
+  border-radius: 12px;
+  padding: 2rem;
+}
+
+.guideline-card {
+  background: rgba(33, 150, 243, 0.1);
+  border-radius: 8px;
+  overflow: hidden;
+}
+
+.guideline-header {
+  background: rgba(33, 150, 243, 0.2);
+  padding: 1rem;
+  font-weight: 500;
+  font-size: 1.1rem;
+  display: flex;
+  align-items: center;
+}
+
+.guideline-content {
+  padding: 1rem;
+  line-height: 1.6;
+}
+
+.invest-list li {
+  margin-bottom: 0.5rem;
+}
+
+/* Sticky Footer */
+.sticky-footer {
+  position: fixed;
+  bottom: 0;
+  width: calc(50% - 2rem);
+  background: linear-gradient(
+    to top,
+    rgba(30, 30, 30, 1) 0%,
+    rgba(30, 30, 30, 0.9) 70%,
+    rgba(30, 30, 30, 0) 100%
+  );
+  padding: 1rem 0;
+  margin-top: -4rem;
+  pointer-events: none;
+  z-index: 10;
+}
+
+.footer-content {
+  display: flex;
+  flex-direction: column;
+  align-items: center;
+  gap: 0.5rem;
+  pointer-events: auto;
+  padding: 0 2rem;
+}
+
+.footer-hint {
+  font-size: 0.8rem;
+  color: rgba(255, 255, 255, 0.6);
+  font-style: italic;
+}
+
+/* Style the textarea */
+:deep(.v-field__input) {
+  color: rgba(255, 255, 255, 0.87) !important;
+  font-family: inherit !important;
+  line-height: 1.6 !important;
+}
+
+:deep(.v-field) {
+  border-color: rgba(255, 255, 255, 0.1) !important;
+}
+
+/* Responsive Design */
+@media (max-width: 1024px) {
+  .two-column-layout {
+    grid-template-columns: 1fr;
+  }
+  
+  .primary-content {
+    position: relative;
+    top: 0;
+    max-height: none;
+  }
+  
+  .sticky-footer {
+    position: fixed;
+    width: 100%;
+    left: 0;
+    right: 0;
+    margin-top: 0;
+  }
+  
+  .guidelines-panel {
+    margin-top: 2rem;
+  }
+}
+
+.input-hint {
+  font-size: 0.9rem;
+  color: rgba(255, 255, 255, 0.6);
+  margin-bottom: 0.5rem;
+  font-style: italic;
+}
+
+.context-input {
+  margin-top: 0.5rem;
+  background: rgba(0, 0, 0, 0.2);
+  border-radius: 8px;
+}
+
+.context-input :deep(.v-field__input) {
+  min-height: 80px !important;
+}
+</style> 
\ No newline at end of file
